// Copyright 2014-present Bill Fisher. All rights reserved.

#include "ofp/yaml/yllvm.h"
#include "ofp/yaml/yconstants.h"

using namespace ofp;
using ofp::yaml::EnumConverter;
using ofp::yaml::EnumConverterSparse;

OFP_BEGIN_IGNORE_GLOBAL_CONSTRUCTOR


static const llvm::StringRef sTypes[] = {
    "OFPT_HELLO",
    "OFPT_ERROR",
    "OFPT_ECHO_REQUEST",
    "OFPT_ECHO_REPLY",
    "OFPT_EXPERIMENTER",
    "OFPT_FEATURES_REQUEST",
    "OFPT_FEATURES_REPLY",
    "OFPT_GET_CONFIG_REQUEST",
    "OFPT_GET_CONFIG_REPLY",
    "OFPT_SET_CONFIG",
    "OFPT_PACKET_IN",
    "OFPT_FLOW_REMOVED",
    "OFPT_PORT_STATUS",
    "OFPT_PACKET_OUT",
    "OFPT_FLOW_MOD",
    "OFPT_GROUP_MOD",
    "OFPT_PORT_MOD",
    "OFPT_TABLE_MOD",
    "OFPT_MULTIPART_REQUEST",
    "OFPT_MULTIPART_REPLY",
    "OFPT_BARRIER_REQUEST",
    "OFPT_BARRIER_REPLY",
    "OFPT_QUEUE_GET_CONFIG_REQUEST",
    "OFPT_QUEUE_GET_CONFIG_REPLY",
    "OFPT_ROLE_REQUEST",
    "OFPT_ROLE_REPLY",
    "OFPT_GET_ASYNC_REQUEST",
    "OFPT_GET_ASYNC_REPLY",
    "OFPT_SET_ASYNC",
    "OFPT_METER_MOD",
};

static const llvm::StringRef sMultipartTypes[] = {
    "OFPMP_DESC",
    "OFPMP_FLOW",
    "OFPMP_AGGREGATE",
    "OFPMP_TABLE",
    "OFPMP_PORT_STATS",
    "OFPMP_QUEUE",
    "OFPMP_GROUP",
    "OFPMP_GROUP_DESC",
    "OFPMP_GROUP_FEATURES",
    "OFPMP_METER",
    "OFPMP_METER_CONFIG",
    "OFPMP_METER_FEATURES",
    "OFPMP_TABLE_FEATURES",
    "OFPMP_PORT_DESC",
};

static const llvm::StringRef sInstructionTypes[] = {
    "OFPIT_NONE",
    "OFPIT_GOTO_TABLE",
    "OFPIT_WRITE_METADATA",
    "OFPIT_WRITE_ACTIONS",
    "OFPIT_APPLY_ACTIONS",
    "OFPIT_CLEAR_ACTIONS",
    "OFPIT_METER",
};

static const llvm::StringRef sMeterBandTypes[] = {
    "OFPMBT_NONE",
    "OFPMBT_DROP",
    "OFPMBT_DSCP_REMARK",
};

static const llvm::StringRef sFlowModCommands[] = {
    "OFPFC_ADD", "OFPFC_MODIFY", "OFPFC_MODIFY_STRICT", "OFPFC_DELETE",
    "OFPFC_DELETE_STRICT"};

static const llvm::StringRef sPacketInReason[] = {
    "OFPR_NO_MATCH", "OFPR_ACTION", "OFPR_INVALID_TTL"};

static const llvm::StringRef sPortStatusReason[] = {
    "ADD",
    "DELETE",
    "MODIFY",
};

static const llvm::StringRef sFlowRemovedReason[] = {
    "IDLE_TIMEOUT", "HARD_TIMEOUT", "DELETE",
    "GROUP_DELETE"};

static const llvm::StringRef sControllerRole[] = { 
    "ROLE_NOCHANGE",
    "ROLE_EQUAL",
    "ROLE_MASTER",
    "ROLE_SLAVE",
};

static const llvm::StringRef sErrorTypes[] = {
  "OFPET_HELLO_FAILED",
  "OFPET_BAD_REQUEST",
  "OFPET_BAD_ACTION",
  "OFPET_BAD_INSTRUCTION",
  "OFPET_BAD_MATCH",
  "OFPET_FLOW_MOD_FAILED",
  "OFPET_GROUP_MOD_FAILED",
  "OFPET_PORT_MOD_FAILED",
  "OFPET_TABLE_MOD_FAILED",
  "OFPET_QUEUE_OP_FAILED",
  "OFPET_SWITCH_CONFIG_FAILED",
  "OFPET_ROLE_REQUEST_FAILED",
  "OFPET_METER_MOD_FAILED",
  "OFPET_TABLE_FEATURES_FAILED"
};

OFP_END_IGNORE_GLOBAL_CONSTRUCTOR

EnumConverter<OFPType>
    llvm::yaml::ScalarTraits<OFPType>::converter{sTypes};

EnumConverter<OFPMultipartType>
    llvm::yaml::ScalarTraits<OFPMultipartType>::converter{sMultipartTypes, "OFPMP_EXPERIMENTER"};

EnumConverter<OFPInstructionType>
    llvm::yaml::ScalarTraits<OFPInstructionType>::converter{sInstructionTypes, "OFPIT_EXPERIMENTER"};

EnumConverter<OFPMeterBandType>
    llvm::yaml::ScalarTraits<OFPMeterBandType>::converter{sMeterBandTypes, "OFPMBT_EXPERIMENTER"};


EnumConverter<OFPFlowModCommand>
    llvm::yaml::ScalarTraits<OFPFlowModCommand>::converter{sFlowModCommands};

EnumConverter<OFPPacketInReason>
    llvm::yaml::ScalarTraits<OFPPacketInReason>::converter{sPacketInReason};

EnumConverter<OFPPortStatusReason>
    llvm::yaml::ScalarTraits<OFPPortStatusReason>::converter{sPortStatusReason};

EnumConverter<OFPFlowRemovedReason>
    llvm::yaml::ScalarTraits<OFPFlowRemovedReason>::converter{sFlowRemovedReason};

EnumConverter<OFPControllerRole> llvm::yaml::ScalarTraits<OFPControllerRole>::converter{sControllerRole};

EnumConverter<OFPErrorType>
    llvm::yaml::ScalarTraits<OFPErrorType>::converter{sErrorTypes, "OFPET_EXPERIMENTER"};


#define STR_ENTRY(s)   { s, #s }

static std::pair<OFPErrorCode, llvm::StringRef> sErrorCodes[] = {
  STR_ENTRY(OFPHFC_INCOMPATIBLE),
  STR_ENTRY(OFPHFC_EPERM),

  STR_ENTRY(OFPBRC_BAD_VERSION),
  STR_ENTRY(OFPBRC_BAD_TYPE),
  STR_ENTRY(OFPBRC_BAD_MULTIPART),
  STR_ENTRY(OFPBRC_BAD_EXPERIMENTER),
  STR_ENTRY(OFPBRC_BAD_EXP_TYPE),
  STR_ENTRY(OFPBRC_EPERM),
  STR_ENTRY(OFPBRC_BAD_LEN),
  STR_ENTRY(OFPBRC_BUFFER_EMPTY),
  STR_ENTRY(OFPBRC_BUFFER_UNKNOWN),
  STR_ENTRY(OFPBRC_BAD_TABLE_ID),
  STR_ENTRY(OFPBRC_IS_SLAVE),
  STR_ENTRY(OFPBRC_BAD_PORT),
  STR_ENTRY(OFPBRC_BAD_PACKET),
  STR_ENTRY(OFPBRC_MULTIPART_BUFFER_OVERFLOW),

  STR_ENTRY(OFPBAC_BAD_TYPE),           
  STR_ENTRY(OFPBAC_BAD_LEN),            
  STR_ENTRY(OFPBAC_BAD_EXPERIMENTER),   
  STR_ENTRY(OFPBAC_BAD_EXP_TYPE),       
  STR_ENTRY(OFPBAC_BAD_OUT_PORT),       
  STR_ENTRY(OFPBAC_BAD_ARGUMENT),       
  STR_ENTRY(OFPBAC_EPERM),              
  STR_ENTRY(OFPBAC_TOO_MANY),           
  STR_ENTRY(OFPBAC_BAD_QUEUE),          
  STR_ENTRY(OFPBAC_BAD_OUT_GROUP),      
  STR_ENTRY(OFPBAC_MATCH_INCONSISTENT),                     
  STR_ENTRY(OFPBAC_UNSUPPORTED_ORDER),                         
  STR_ENTRY(OFPBAC_BAD_TAG),           
  STR_ENTRY(OFPBAC_BAD_SET_TYPE),      
  STR_ENTRY(OFPBAC_BAD_SET_LEN),       
  STR_ENTRY(OFPBAC_BAD_SET_ARGUMENT),

  STR_ENTRY(OFPBIC_UNKNOWN_INST),  
  STR_ENTRY(OFPBIC_UNSUP_INST),    
  STR_ENTRY(OFPBIC_BAD_TABLE_ID),  
  STR_ENTRY(OFPBIC_UNSUP_METADATA),  
  STR_ENTRY(OFPBIC_UNSUP_METADATA_MASK),                        
  STR_ENTRY(OFPBIC_BAD_EXPERIMENTER),  
  STR_ENTRY(OFPBIC_BAD_EXP_TYPE),      
  STR_ENTRY(OFPBIC_BAD_LEN),           
  STR_ENTRY(OFPBIC_EPERM),

  STR_ENTRY(OFPBMC_BAD_TYPE),        
  STR_ENTRY(OFPBMC_BAD_LEN),         
  STR_ENTRY(OFPBMC_BAD_TAG),         
  STR_ENTRY(OFPBMC_BAD_DL_ADDR_MASK),
  STR_ENTRY(OFPBMC_BAD_NW_ADDR_MASK),
  STR_ENTRY(OFPBMC_BAD_WILDCARDS),  
  STR_ENTRY(OFPBMC_BAD_FIELD), 
  STR_ENTRY(OFPBMC_BAD_VALUE), 
  STR_ENTRY(OFPBMC_BAD_MASK),  
  STR_ENTRY(OFPBMC_BAD_PREREQ),  
  STR_ENTRY(OFPBMC_DUP_FIELD),  
  STR_ENTRY(OFPBMC_EPERM),      

  STR_ENTRY(OFPFMFC_UNKNOWN),     
  STR_ENTRY(OFPFMFC_TABLE_FULL),  
  STR_ENTRY(OFPFMFC_BAD_TABLE_ID),
  STR_ENTRY(OFPFMFC_OVERLAP), 
  STR_ENTRY(OFPFMFC_EPERM), 
  STR_ENTRY(OFPFMFC_BAD_TIMEOUT), 
  STR_ENTRY(OFPFMFC_BAD_COMMAND), 
  STR_ENTRY(OFPFMFC_BAD_FLAGS), 

  STR_ENTRY(OFPGMFC_GROUP_EXISTS),                         
  STR_ENTRY(OFPGMFC_INVALID_GROUP),
  STR_ENTRY(OFPGMFC_WEIGHT_UNSUPPORTED),  
  STR_ENTRY(OFPGMFC_OUT_OF_GROUPS),
  STR_ENTRY(OFPGMFC_OUT_OF_BUCKETS),
  STR_ENTRY(OFPGMFC_CHAINING_UNSUPPORTED),
  STR_ENTRY(OFPGMFC_WATCH_UNSUPPORTED),
  STR_ENTRY(OFPGMFC_LOOP),           
  STR_ENTRY(OFPGMFC_UNKNOWN_GROUP),
  STR_ENTRY(OFPGMFC_CHAINED_GROUP),
  STR_ENTRY(OFPGMFC_BAD_TYPE),    
  STR_ENTRY(OFPGMFC_BAD_COMMAND), 
  STR_ENTRY(OFPGMFC_BAD_BUCKET),  
  STR_ENTRY(OFPGMFC_BAD_WATCH),   
  STR_ENTRY(OFPGMFC_EPERM),       

  STR_ENTRY(OFPPMFC_BAD_PORT),     
  STR_ENTRY(OFPPMFC_BAD_HW_ADDR),  
  STR_ENTRY(OFPPMFC_BAD_CONFIG),     
  STR_ENTRY(OFPPMFC_BAD_ADVERTISE),  
  STR_ENTRY(OFPPMFC_EPERM),          

  STR_ENTRY(OFPTMFC_BAD_TABLE),   
  STR_ENTRY(OFPTMFC_BAD_CONFIG),  
  STR_ENTRY(OFPTMFC_EPERM),       

  STR_ENTRY(OFPQOFC_BAD_PORT),   
  STR_ENTRY(OFPQOFC_BAD_QUEUE),  
  STR_ENTRY(OFPQOFC_EPERM),      

  STR_ENTRY(OFPSCFC_BAD_FLAGS),  
  STR_ENTRY(OFPSCFC_BAD_LEN),    
  STR_ENTRY(OFPSCFC_EPERM),      

  STR_ENTRY(OFPRRFC_STALE),     
  STR_ENTRY(OFPRRFC_UNSUP),     
  STR_ENTRY(OFPRRFC_BAD_ROLE),  

  STR_ENTRY(OFPMMFC_UNKNOWN),       
  STR_ENTRY(OFPMMFC_METER_EXISTS),  
  STR_ENTRY(OFPMMFC_INVALID_METER),  
  STR_ENTRY(OFPMMFC_UNKNOWN_METER),   
  STR_ENTRY(OFPMMFC_BAD_COMMAND),     
  STR_ENTRY(OFPMMFC_BAD_FLAGS),       
  STR_ENTRY(OFPMMFC_BAD_RATE),        
  STR_ENTRY(OFPMMFC_BAD_BURST),       
  STR_ENTRY(OFPMMFC_BAD_BAND),        
  STR_ENTRY(OFPMMFC_BAD_BAND_VALUE),  
  STR_ENTRY(OFPMMFC_OUT_OF_METERS),  
  STR_ENTRY(OFPMMFC_OUT_OF_BANDS),

  STR_ENTRY(OFPTFFC_BAD_TABLE),
  STR_ENTRY(OFPTFFC_BAD_METADATA),
  STR_ENTRY(OFPTFFC_BAD_TYPE),
  STR_ENTRY(OFPTFFC_BAD_LEN),
  STR_ENTRY(OFPTFFC_BAD_ARGUMENT),
  STR_ENTRY(OFPTFFC_EPERM),
};

EnumConverterSparse<OFPErrorCode>
    llvm::yaml::ScalarTraits<OFPErrorCode>::converter{sErrorCodes};
