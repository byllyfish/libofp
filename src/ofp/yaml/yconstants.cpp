// Copyright 2014-present Bill Fisher. All rights reserved.

#include "ofp/yaml/yllvm.h"
#include "ofp/yaml/yconstants.h"

using namespace ofp;
using ofp::yaml::EnumConverter;
using ofp::yaml::EnumConverterSparse;

OFP_BEGIN_IGNORE_GLOBAL_CONSTRUCTOR

static const llvm::StringRef sTypes[] = {
    "HELLO", "ERROR", "ECHO_REQUEST", "ECHO_REPLY", "EXPERIMENTER",
    "FEATURES_REQUEST", "FEATURES_REPLY", "GET_CONFIG_REQUEST",
    "GET_CONFIG_REPLY", "SET_CONFIG", "PACKET_IN", "FLOW_REMOVED",
    "PORT_STATUS", "PACKET_OUT", "FLOW_MOD", "GROUP_MOD", "PORT_MOD",
    "TABLE_MOD", "MULTIPART_REQUEST", "MULTIPART_REPLY", "BARRIER_REQUEST",
    "BARRIER_REPLY", "QUEUE_GET_CONFIG_REQUEST", "QUEUE_GET_CONFIG_REPLY",
    "ROLE_REQUEST", "ROLE_REPLY", "GET_ASYNC_REQUEST", "GET_ASYNC_REPLY",
    "SET_ASYNC", "METER_MOD", "ROLE_STATUS", "TABLE_STATUS", "REQUESTFORWARD",
    "BUNDLE_CONTROL", "BUNDLE_ADD_MESSAGE"};

static const llvm::StringRef sMultipartTypes[] = {
    "DESC",           "FLOW",      "AGGREGATE",    "TABLE",
    "PORT_STATS",     "QUEUE",     "GROUP",        "GROUP_DESC",
    "GROUP_FEATURES", "METER",     "METER_CONFIG", "METER_FEATURES",
    "TABLE_FEATURES", "PORT_DESC", "TABLE_DESC",   "QUEUE_DESC",
    "FLOW_MONITOR",
};

static const llvm::StringRef sInstructionTypes[] = {
    "NONE",          "GOTO_TABLE",    "WRITE_METADATA", "WRITE_ACTIONS",
    "APPLY_ACTIONS", "CLEAR_ACTIONS", "METER",
};

static const llvm::StringRef sMeterBandTypes[] = {
    "NONE", "DROP", "DSCP_REMARK",
};

static const llvm::StringRef sFlowModCommands[] = {
    "ADD", "MODIFY", "MODIFY_STRICT", "DELETE", "DELETE_STRICT"};

static const llvm::StringRef sPacketInReason[] = {
    "TABLE_MISS", "APPLY_ACTION", "INVALID_TTL",
    "ACTION_SET", "GROUP",        "PACKET_OUT",
};

static const llvm::StringRef sPortStatusReason[] = {
    "ADD", "DELETE", "MODIFY",
};

static const llvm::StringRef sFlowRemovedReason[] = {
    "IDLE_TIMEOUT", "HARD_TIMEOUT", "DELETE",
    "GROUP_DELETE", "METER_DELETE", "EVICTION"};

static const llvm::StringRef sControllerRole[] = {
    "ROLE_NOCHANGE", "ROLE_EQUAL", "ROLE_MASTER", "ROLE_SLAVE",
};

static const llvm::StringRef sMeterModCommand[] = {
    "ADD", "MODIFY", "DELETE",
};

static const llvm::StringRef sErrorTypes[] = {
    "OFPET_HELLO_FAILED", "OFPET_BAD_REQUEST", "OFPET_BAD_ACTION",
    "OFPET_BAD_INSTRUCTION", "OFPET_BAD_MATCH", "OFPET_FLOW_MOD_FAILED",
    "OFPET_GROUP_MOD_FAILED", "OFPET_PORT_MOD_FAILED", "OFPET_TABLE_MOD_FAILED",
    "OFPET_QUEUE_OP_FAILED", "OFPET_SWITCH_CONFIG_FAILED",
    "OFPET_ROLE_REQUEST_FAILED", "OFPET_METER_MOD_FAILED",
    "OFPET_TABLE_FEATURES_FAILED"};

static const llvm::StringRef sFlowUpdateEvent[] = {
    "INITIAL", "ADDED", "REMOVED", "MODIFIED", "ABBREV", "PAUSED", "RESUMED"};

EnumConverter<OFPType> llvm::yaml::ScalarTraits<OFPType>::converter{sTypes};

EnumConverter<OFPMultipartType>
    llvm::yaml::ScalarTraits<OFPMultipartType>::converter{sMultipartTypes,
                                                          "EXPERIMENTER"};

EnumConverter<OFPInstructionType>
    llvm::yaml::ScalarTraits<OFPInstructionType>::converter{sInstructionTypes,
                                                            "EXPERIMENTER"};

EnumConverter<OFPMeterBandType>
    llvm::yaml::ScalarTraits<OFPMeterBandType>::converter{sMeterBandTypes,
                                                          "EXPERIMENTER"};

EnumConverter<OFPFlowModCommand>
    llvm::yaml::ScalarTraits<OFPFlowModCommand>::converter{sFlowModCommands};

EnumConverter<OFPPacketInReason>
    llvm::yaml::ScalarTraits<OFPPacketInReason>::converter{sPacketInReason};

EnumConverter<OFPPortStatusReason>
    llvm::yaml::ScalarTraits<OFPPortStatusReason>::converter{sPortStatusReason};

EnumConverter<OFPFlowRemovedReason>
    llvm::yaml::ScalarTraits<OFPFlowRemovedReason>::converter{
        sFlowRemovedReason};

EnumConverter<OFPControllerRole>
    llvm::yaml::ScalarTraits<OFPControllerRole>::converter{sControllerRole};

EnumConverter<OFPMeterModCommand>
    llvm::yaml::ScalarTraits<OFPMeterModCommand>::converter{sMeterModCommand};

EnumConverter<OFPErrorType> llvm::yaml::ScalarTraits<OFPErrorType>::converter{
    sErrorTypes, "OFPET_EXPERIMENTER"};

EnumConverter<OFPFlowUpdateEvent>
    llvm::yaml::ScalarTraits<OFPFlowUpdateEvent>::converter{sFlowUpdateEvent};

#define STR_ENTRY(s) \
  { s, #s }

static std::pair<OFPErrorCode, llvm::StringRef> sErrorCodes[] = {
    STR_ENTRY(OFPHFC_INCOMPATIBLE), STR_ENTRY(OFPHFC_EPERM),

    STR_ENTRY(OFPBRC_BAD_VERSION), STR_ENTRY(OFPBRC_BAD_TYPE),
    STR_ENTRY(OFPBRC_BAD_MULTIPART), STR_ENTRY(OFPBRC_BAD_EXPERIMENTER),
    STR_ENTRY(OFPBRC_BAD_EXP_TYPE), STR_ENTRY(OFPBRC_EPERM),
    STR_ENTRY(OFPBRC_BAD_LEN), STR_ENTRY(OFPBRC_BUFFER_EMPTY),
    STR_ENTRY(OFPBRC_BUFFER_UNKNOWN), STR_ENTRY(OFPBRC_BAD_TABLE_ID),
    STR_ENTRY(OFPBRC_IS_SLAVE), STR_ENTRY(OFPBRC_BAD_PORT),
    STR_ENTRY(OFPBRC_BAD_PACKET), STR_ENTRY(OFPBRC_MULTIPART_BUFFER_OVERFLOW),

    STR_ENTRY(OFPBAC_BAD_TYPE), STR_ENTRY(OFPBAC_BAD_LEN),
    STR_ENTRY(OFPBAC_BAD_EXPERIMENTER), STR_ENTRY(OFPBAC_BAD_EXP_TYPE),
    STR_ENTRY(OFPBAC_BAD_OUT_PORT), STR_ENTRY(OFPBAC_BAD_ARGUMENT),
    STR_ENTRY(OFPBAC_EPERM), STR_ENTRY(OFPBAC_TOO_MANY),
    STR_ENTRY(OFPBAC_BAD_QUEUE), STR_ENTRY(OFPBAC_BAD_OUT_GROUP),
    STR_ENTRY(OFPBAC_MATCH_INCONSISTENT), STR_ENTRY(OFPBAC_UNSUPPORTED_ORDER),
    STR_ENTRY(OFPBAC_BAD_TAG), STR_ENTRY(OFPBAC_BAD_SET_TYPE),
    STR_ENTRY(OFPBAC_BAD_SET_LEN), STR_ENTRY(OFPBAC_BAD_SET_ARGUMENT),

    STR_ENTRY(OFPBIC_UNKNOWN_INST), STR_ENTRY(OFPBIC_UNSUP_INST),
    STR_ENTRY(OFPBIC_BAD_TABLE_ID), STR_ENTRY(OFPBIC_UNSUP_METADATA),
    STR_ENTRY(OFPBIC_UNSUP_METADATA_MASK), STR_ENTRY(OFPBIC_BAD_EXPERIMENTER),
    STR_ENTRY(OFPBIC_BAD_EXP_TYPE), STR_ENTRY(OFPBIC_BAD_LEN),
    STR_ENTRY(OFPBIC_EPERM),

    STR_ENTRY(OFPBMC_BAD_TYPE), STR_ENTRY(OFPBMC_BAD_LEN),
    STR_ENTRY(OFPBMC_BAD_TAG), STR_ENTRY(OFPBMC_BAD_DL_ADDR_MASK),
    STR_ENTRY(OFPBMC_BAD_NW_ADDR_MASK), STR_ENTRY(OFPBMC_BAD_WILDCARDS),
    STR_ENTRY(OFPBMC_BAD_FIELD), STR_ENTRY(OFPBMC_BAD_VALUE),
    STR_ENTRY(OFPBMC_BAD_MASK), STR_ENTRY(OFPBMC_BAD_PREREQ),
    STR_ENTRY(OFPBMC_DUP_FIELD), STR_ENTRY(OFPBMC_EPERM),

    STR_ENTRY(OFPFMFC_UNKNOWN), STR_ENTRY(OFPFMFC_TABLE_FULL),
    STR_ENTRY(OFPFMFC_BAD_TABLE_ID), STR_ENTRY(OFPFMFC_OVERLAP),
    STR_ENTRY(OFPFMFC_EPERM), STR_ENTRY(OFPFMFC_BAD_TIMEOUT),
    STR_ENTRY(OFPFMFC_BAD_COMMAND), STR_ENTRY(OFPFMFC_BAD_FLAGS),

    STR_ENTRY(OFPGMFC_GROUP_EXISTS), STR_ENTRY(OFPGMFC_INVALID_GROUP),
    STR_ENTRY(OFPGMFC_WEIGHT_UNSUPPORTED), STR_ENTRY(OFPGMFC_OUT_OF_GROUPS),
    STR_ENTRY(OFPGMFC_OUT_OF_BUCKETS), STR_ENTRY(OFPGMFC_CHAINING_UNSUPPORTED),
    STR_ENTRY(OFPGMFC_WATCH_UNSUPPORTED), STR_ENTRY(OFPGMFC_LOOP),
    STR_ENTRY(OFPGMFC_UNKNOWN_GROUP), STR_ENTRY(OFPGMFC_CHAINED_GROUP),
    STR_ENTRY(OFPGMFC_BAD_TYPE), STR_ENTRY(OFPGMFC_BAD_COMMAND),
    STR_ENTRY(OFPGMFC_BAD_BUCKET), STR_ENTRY(OFPGMFC_BAD_WATCH),
    STR_ENTRY(OFPGMFC_EPERM),

    STR_ENTRY(OFPPMFC_BAD_PORT), STR_ENTRY(OFPPMFC_BAD_HW_ADDR),
    STR_ENTRY(OFPPMFC_BAD_CONFIG), STR_ENTRY(OFPPMFC_BAD_ADVERTISE),
    STR_ENTRY(OFPPMFC_EPERM),

    STR_ENTRY(OFPTMFC_BAD_TABLE), STR_ENTRY(OFPTMFC_BAD_CONFIG),
    STR_ENTRY(OFPTMFC_EPERM),

    STR_ENTRY(OFPQOFC_BAD_PORT), STR_ENTRY(OFPQOFC_BAD_QUEUE),
    STR_ENTRY(OFPQOFC_EPERM),

    STR_ENTRY(OFPSCFC_BAD_FLAGS), STR_ENTRY(OFPSCFC_BAD_LEN),
    STR_ENTRY(OFPSCFC_EPERM),

    STR_ENTRY(OFPRRFC_STALE), STR_ENTRY(OFPRRFC_UNSUP),
    STR_ENTRY(OFPRRFC_BAD_ROLE),

    STR_ENTRY(OFPMMFC_UNKNOWN), STR_ENTRY(OFPMMFC_METER_EXISTS),
    STR_ENTRY(OFPMMFC_INVALID_METER), STR_ENTRY(OFPMMFC_UNKNOWN_METER),
    STR_ENTRY(OFPMMFC_BAD_COMMAND), STR_ENTRY(OFPMMFC_BAD_FLAGS),
    STR_ENTRY(OFPMMFC_BAD_RATE), STR_ENTRY(OFPMMFC_BAD_BURST),
    STR_ENTRY(OFPMMFC_BAD_BAND), STR_ENTRY(OFPMMFC_BAD_BAND_VALUE),
    STR_ENTRY(OFPMMFC_OUT_OF_METERS), STR_ENTRY(OFPMMFC_OUT_OF_BANDS),

    STR_ENTRY(OFPTFFC_BAD_TABLE), STR_ENTRY(OFPTFFC_BAD_METADATA),
    STR_ENTRY(OFPTFFC_BAD_TYPE), STR_ENTRY(OFPTFFC_BAD_LEN),
    STR_ENTRY(OFPTFFC_BAD_ARGUMENT), STR_ENTRY(OFPTFFC_EPERM),
};

EnumConverterSparse<OFPErrorCode>
    llvm::yaml::ScalarTraits<OFPErrorCode>::converter{sErrorCodes};

OFP_END_IGNORE_GLOBAL_CONSTRUCTOR
