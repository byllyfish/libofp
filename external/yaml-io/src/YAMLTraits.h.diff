--- ../../../llvm_git/llvm/include/llvm/Support/YAMLTraits.h	2018-12-22 13:28:04.000000000 -0700
+++ ./include/llvm/Support/YAMLTraits.h	2018-12-22 14:03:44.000000000 -0700
@@ -19,7 +19,7 @@
 #include "llvm/Support/AlignOf.h"
 #include "llvm/Support/Allocator.h"
 #include "llvm/Support/Endian.h"
-#include "llvm/Support/Regex.h"
+//#include "llvm/Support/Regex.h"
 #include "llvm/Support/SourceMgr.h"
 #include "llvm/Support/YAMLParser.h"
 #include "llvm/Support/raw_ostream.h"
@@ -161,6 +161,7 @@
   // static QuotingType mustQuote(StringRef);
 };
 
+
 /// This class should be specialized by type that requires custom conversion
 /// to/from a YAML literal block scalar. For example:
 ///
@@ -361,6 +362,20 @@
       (sizeof(test<ScalarTraits<T>>(nullptr, nullptr, nullptr)) == 1);
 };
 
+// Test if ScalarTraits<T>::json_type exists and is a primitive type.
+template <class T>
+struct has_ScalarJsonTraits
+{
+  template <typename U>
+  static char test(typename U::json_type *);
+
+  template <typename U>
+  static double test(...);
+
+public:
+  static bool const value = (sizeof(test<ScalarTraits<T>>(nullptr)) == 1);
+};
+
 // Test if BlockScalarTraits<T> is defined on type T.
 template <class T>
 struct has_BlockScalarTraits
@@ -449,6 +464,22 @@
   static bool const value = (sizeof(test<MappingTraits<T>>(nullptr)) == 1);
 };
 
+// Test if SequenceTraits<T>::validate() is defined on type T.
+template <class T>
+struct has_SequenceValidateTraits
+{
+  using Signature_validate = StringRef (*)(class IO&, T&);
+
+  template <typename U>
+  static char test(SameType<Signature_validate, &U::validate>*);
+
+  template <typename U>
+  static double test(...);
+
+public:
+  static bool const value = (sizeof(test<SequenceTraits<T> >(nullptr)) == 1);
+};
+
 // Test if SequenceTraits<T> is defined on type T.
 template <class T>
 struct has_SequenceMethodTraits
@@ -464,6 +495,21 @@
   static bool const value =  (sizeof(test<SequenceTraits<T>>(nullptr)) == 1);
 };
 
+// Test if SequenceTraits<T> is defined on type T, with an iterator
+// type, and begin, end methods.
+template <class T>
+struct has_IteratorMethodTraits
+{
+  template <typename U>
+  static char test(typename U::iterator *);
+
+  template <typename U>
+  static double test(...);
+
+public:
+  static bool const value = (sizeof(test<SequenceTraits<T>>(nullptr)) == 1);
+};
+
 // Test if CustomMappingTraits<T> is defined on type T.
 template <class T>
 struct has_CustomMappingTraits
@@ -511,7 +557,8 @@
 // Test if SequenceTraits<T> is defined on type T
 template<typename T>
 struct has_SequenceTraits : public std::integral_constant<bool,
-                                      has_SequenceMethodTraits<T>::value > { };
+                                      has_SequenceMethodTraits<T>::value ||
+                                      has_IteratorMethodTraits<T>::value> { };
 
 // Test if DocumentListTraits<T> is defined on type T
 template <class T>
@@ -753,6 +800,7 @@
   virtual ~IO();
 
   virtual bool outputting() = 0;
+  virtual bool outputtingJson() { return false; }
 
   virtual unsigned beginSequence() = 0;
   virtual bool preflightElement(unsigned, void *&) = 0;
@@ -783,8 +831,11 @@
   virtual bool beginBitSetScalar(bool &) = 0;
   virtual bool bitSetMatch(const char*, bool) = 0;
   virtual void endBitSetScalar() = 0;
+  virtual bool bitSetMatchOther(uint32_t &) = 0;
+  virtual StringRef bitSetCaseUnmatched() = 0;
 
   virtual void scalarString(StringRef &, QuotingType) = 0;
+  virtual void scalarJson(StringRef) {}
   virtual void blockScalarString(StringRef &) = 0;
   virtual void scalarTag(std::string &) = 0;
 
@@ -846,6 +897,15 @@
       Val = Val | ConstVal;
   }
 
+  template <typename T>
+  void bitSetCaseOther(T &Val, T Mask) {
+    uint32_t Temp = Val;
+    if (outputting()) 
+      Temp &= Mask;
+    if (bitSetMatchOther(Temp))
+      Val = static_cast<T>(Val | Temp);
+  }
+
   void *getContext();
   void setContext(void *);
 
@@ -864,8 +924,8 @@
     mapOptionalWithContext(Key, Val, Ctx);
   }
 
-  template <typename T>
-  void mapOptional(const char *Key, T &Val, const T &Default) {
+  template <typename T, typename U>
+  void mapOptional(const char *Key, T &Val, const U &Default) {
     EmptyContext Ctx;
     mapOptionalWithContext(Key, Val, Default, Ctx);
   }
@@ -891,8 +951,8 @@
     this->processKey(Key, Val, false, Ctx);
   }
 
-  template <typename T, typename Context>
-  void mapOptionalWithContext(const char *Key, T &Val, const T &Default,
+  template <typename T, typename U, typename Context>
+  void mapOptionalWithContext(const char *Key, T &Val, const U &Default,
                               Context &Ctx) {
     this->processKeyWithDefault(Key, Val, Default, false, Ctx);
   }
@@ -920,8 +980,8 @@
     }
   }
 
-  template <typename T, typename Context>
-  void processKeyWithDefault(const char *Key, T &Val, const T &DefaultValue,
+  template <typename T, typename U, typename Context>
+  void processKeyWithDefault(const char *Key, T &Val, const U &DefaultValue,
                              bool Required, Context &Ctx) {
     void *SaveInfo;
     bool UseDefault;
@@ -984,12 +1044,57 @@
   }
 }
 
+template<typename T>
+inline void primitive_to_json(T value, llvm::raw_ostream &os) {
+  os << value;
+}
+
+template<>
+inline void primitive_to_json(bool value, llvm::raw_ostream &os) {
+  os << (value ? "true" : "false");
+}
+
+template<>
+inline void primitive_to_json(uint8_t value, llvm::raw_ostream &os) {
+  os << static_cast<unsigned>(value);
+}
+
+template<typename T>
+typename std::enable_if<has_ScalarTraits<T>::value && has_ScalarJsonTraits<T>::value,void>::type
+yamlize(IO &io, T &Val, bool, EmptyContext &Ctx) {
+  if ( io.outputting() ) {
+    // Handle integer types differently on output to Json.
+    if (io.outputtingJson()) {
+      typename ScalarTraits<T>::json_type u = Val;
+      llvm::SmallString<128> Storage;
+      llvm::raw_svector_ostream Buffer(Storage);
+      primitive_to_json(u, Buffer);
+      StringRef Str = Buffer.str();
+      io.scalarJson(Str);
+    } else {
+      llvm::SmallString<128> Storage;
+      llvm::raw_svector_ostream Buffer(Storage);
+      ScalarTraits<T>::output(Val, io.getContext(), Buffer);
+      StringRef Str = Buffer.str();
+      io.scalarString(Str, ScalarTraits<T>::mustQuote(Str));
+    }
+  }
+  else {
+    StringRef Str;
+    io.scalarString(Str, QuotingType::None);  // call mustQuote on Input?
+    StringRef Result = ScalarTraits<T>::input(Str, io.getContext(), Val);
+    if ( !Result.empty() ) {
+      io.setError(llvm::Twine(Result));
+    }
+  }
+}
+
 template <typename T>
-typename std::enable_if<has_ScalarTraits<T>::value, void>::type
+typename std::enable_if<has_ScalarTraits<T>::value && !has_ScalarJsonTraits<T>::value, void>::type
 yamlize(IO &io, T &Val, bool, EmptyContext &Ctx) {
   if ( io.outputting() ) {
-    std::string Storage;
-    raw_string_ostream Buffer(Storage);
+    SmallString<128> Storage;
+    raw_svector_ostream Buffer(Storage);
     ScalarTraits<T>::output(Val, io.getContext(), Buffer);
     StringRef Str = Buffer.str();
     io.scalarString(Str, ScalarTraits<T>::mustQuote(Str));
@@ -1123,6 +1228,57 @@
   char missing_yaml_trait_for_type[sizeof(MissingTrait<T>)];
 }
 
+template<typename T>
+T &mutable_ref(const T& ref) {
+  return const_cast<T&>(ref);
+}
+
+template<typename T>
+typename std::enable_if<has_IteratorMethodTraits<T>::value,void>::type
+yamlize(IO &io, T &Seq, bool, EmptyContext &Ctx) {
+  assert(io.outputting());
+  if ( has_FlowTraits< SequenceTraits<T> >::value ) {
+    unsigned incnt = io.beginFlowSequence();
+    typename SequenceTraits<T>::iterator iter = SequenceTraits<T>::begin(io, Seq);
+    typename SequenceTraits<T>::iterator iterEnd = SequenceTraits<T>::end(io, Seq);
+    for (; iter < iterEnd; SequenceTraits<T>::next(iter, iterEnd)) {
+      void *SaveInfo;
+      if ( io.preflightFlowElement(0, SaveInfo) ) {
+        yamlize(io, mutable_ref(*iter), true, Ctx);
+        io.postflightFlowElement(SaveInfo);
+      }
+    }
+    io.endFlowSequence();
+  }
+  else {
+    unsigned incnt = io.beginSequence();
+    typename SequenceTraits<T>::iterator iter = SequenceTraits<T>::begin(io, Seq);
+    typename SequenceTraits<T>::iterator iterEnd = SequenceTraits<T>::end(io, Seq);
+    for (; iter < iterEnd; SequenceTraits<T>::next(iter, iterEnd)) {
+      void *SaveInfo;
+      if ( io.preflightElement(0, SaveInfo) ) {
+        yamlize(io, mutable_ref(*iter), true, Ctx);
+        io.postflightElement(SaveInfo);
+      }
+    }
+    io.endSequence();
+  }
+}
+
+template <typename T>
+typename std::enable_if<has_SequenceValidateTraits<T>::value,void>::type
+validateSequenceTraits(IO &io, T &Seq) {
+  StringRef err = SequenceTraits<T>::validate(io, Seq);
+  if (!err.empty())
+    io.setError(err);
+}
+
+template <typename T>
+typename std::enable_if<!has_SequenceValidateTraits<T>::value,void>::type
+validateSequenceTraits(IO &io, T &Seq) {
+}
+
+
 template <typename T, typename Context>
 typename std::enable_if<has_SequenceTraits<T>::value, void>::type
 yamlize(IO &io, T &Seq, bool, Context &Ctx) {
@@ -1150,6 +1306,7 @@
     }
     io.endSequence();
   }
+  validateSequenceTraits(io, Seq);
 }
 
 template<>
@@ -1157,6 +1314,7 @@
   static void output(const bool &, void* , raw_ostream &);
   static StringRef input(StringRef, void *, bool &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = bool;
 };
 
 template<>
@@ -1178,6 +1336,7 @@
   static void output(const uint8_t &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, uint8_t &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = uint8_t;
 };
 
 template<>
@@ -1185,6 +1344,7 @@
   static void output(const uint16_t &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, uint16_t &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = uint16_t;
 };
 
 template<>
@@ -1192,6 +1352,7 @@
   static void output(const uint32_t &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, uint32_t &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = uint32_t;
 };
 
 template<>
@@ -1199,6 +1360,7 @@
   static void output(const uint64_t &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, uint64_t &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = uint64_t;
 };
 
 template<>
@@ -1206,6 +1368,7 @@
   static void output(const int8_t &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, int8_t &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = int8_t;
 };
 
 template<>
@@ -1213,6 +1376,7 @@
   static void output(const int16_t &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, int16_t &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = int16_t;
 };
 
 template<>
@@ -1220,6 +1384,7 @@
   static void output(const int32_t &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, int32_t &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = int32_t;
 };
 
 template<>
@@ -1227,6 +1392,7 @@
   static void output(const int64_t &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, int64_t &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = int64_t;
 };
 
 template<>
@@ -1234,6 +1400,7 @@
   static void output(const float &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, float &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = float;
 };
 
 template<>
@@ -1241,6 +1408,7 @@
   static void output(const double &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, double &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = double;
 };
 
 // For endian types, we just use the existing ScalarTraits for the underlying
@@ -1393,6 +1561,8 @@
   bool beginBitSetScalar(bool &) override;
   bool bitSetMatch(const char *, bool ) override;
   void endBitSetScalar() override;
+  bool bitSetMatchOther(uint32_t &) override;
+  StringRef bitSetCaseUnmatched() override;
   void scalarString(StringRef &, QuotingType) override;
   void blockScalarString(StringRef &) override;
   void scalarTag(std::string &) override;
@@ -1540,6 +1710,8 @@
   bool beginBitSetScalar(bool &) override;
   bool bitSetMatch(const char *, bool ) override;
   void endBitSetScalar() override;
+  bool bitSetMatchOther(uint32_t &) override;
+  StringRef bitSetCaseUnmatched() override;
   void scalarString(StringRef &, QuotingType) override;
   void blockScalarString(StringRef &) override;
   void scalarTag(std::string &) override;
@@ -1628,6 +1800,7 @@
   static void output(const Hex8 &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, Hex8 &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = uint8_t;
 };
 
 template<>
@@ -1635,6 +1808,7 @@
   static void output(const Hex16 &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, Hex16 &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = uint16_t;
 };
 
 template<>
@@ -1642,6 +1816,7 @@
   static void output(const Hex32 &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, Hex32 &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = uint32_t;
 };
 
 template<>
@@ -1649,6 +1824,7 @@
   static void output(const Hex64 &, void *, raw_ostream &);
   static StringRef input(StringRef, void *, Hex64 &);
   static QuotingType mustQuote(StringRef) { return QuotingType::None; }
+  using json_type = uint64_t;
 };
 
 // Define non-member operator>> so that Input can stream in a document list.
