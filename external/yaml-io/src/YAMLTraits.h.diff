--- /Users/bfish/code/llvm/include/llvm/Support/YAMLTraits.h	2016-10-14 12:38:27.000000000 -0700
+++ ./include/llvm/Support/YAMLTraits.h	2016-10-18 11:39:28.000000000 -0700
@@ -12,13 +12,14 @@
 
 #include "llvm/ADT/Optional.h"
 #include "llvm/ADT/SmallVector.h"
+#include "llvm/ADT/SmallString.h"
 #include "llvm/ADT/StringMap.h"
 #include "llvm/ADT/StringRef.h"
 #include "llvm/ADT/StringSwitch.h"
 #include "llvm/ADT/Twine.h"
 #include "llvm/Support/Compiler.h"
 #include "llvm/Support/Endian.h"
-#include "llvm/Support/Regex.h"
+//#include "llvm/Support/Regex.h"
 #include "llvm/Support/SourceMgr.h"
 #include "llvm/Support/YAMLParser.h"
 #include "llvm/Support/raw_ostream.h"
@@ -263,6 +264,20 @@
       (sizeof(test<ScalarTraits<T>>(nullptr, nullptr, nullptr)) == 1);
 };
 
+// Test if ScalarTraits<T>::json_type exists and is a primitive type.
+template <class T>
+struct has_ScalarJsonTraits
+{
+  template <typename U>
+  static char test(typename U::json_type *);
+
+  template <typename U>
+  static double test(...);
+
+public:
+  static bool const value = (sizeof(test<ScalarTraits<T>>(nullptr)) == 1);
+};
+
 // Test if BlockScalarTraits<T> is defined on type T.
 template <class T>
 struct has_BlockScalarTraits
@@ -338,6 +353,22 @@
   static bool const value = (sizeof(test<MappingTraits<T>>(nullptr)) == 1);
 };
 
+// Test if SequenceTraits<T>::validate() is defined on type T.
+template <class T>
+struct has_SequenceValidateTraits
+{
+  typedef StringRef (*Signature_validate)(class IO&, T&);
+
+  template <typename U>
+  static char test(SameType<Signature_validate, &U::validate>*);
+
+  template <typename U>
+  static double test(...);
+
+public:
+  static bool const value = (sizeof(test<SequenceTraits<T> >(nullptr)) == 1);
+};
+
 // Test if SequenceTraits<T> is defined on type T.
 template <class T>
 struct has_SequenceMethodTraits
@@ -354,6 +385,21 @@
   static bool const value =  (sizeof(test<SequenceTraits<T> >(nullptr)) == 1);
 };
 
+// Test if SequenceTraits<T> is defined on type T, with an iterator
+// type, and begin, end methods.
+template <class T>
+struct has_IteratorMethodTraits
+{
+  template <typename U>
+  static char test(typename U::iterator *);
+
+  template <typename U>
+  static double test(...);
+
+public:
+  static bool const value = (sizeof(test<SequenceTraits<T>>(nullptr)) == 1);
+};
+
 // has_FlowTraits<int> will cause an error with some compilers because
 // it subclasses int.  Using this wrapper only instantiates the
 // real has_FlowTraits only if the template type is a class.
@@ -386,7 +432,8 @@
 // Test if SequenceTraits<T> is defined on type T
 template<typename T>
 struct has_SequenceTraits : public std::integral_constant<bool,
-                                      has_SequenceMethodTraits<T>::value > { };
+                                      has_SequenceMethodTraits<T>::value ||
+                                      has_IteratorMethodTraits<T>::value> { };
 
 // Test if DocumentListTraits<T> is defined on type T
 template <class T>
@@ -404,6 +451,53 @@
   static bool const value = (sizeof(test<DocumentListTraits<T> >(nullptr))==1);
 };
 
+// Replace regex "^(\\.[0-9]+|[0-9]+(\\.[0-9]*)?)([eE][-+]?[0-9]+)?$"
+inline bool isFloat(StringRef S) {
+  bool digitSeen = false;
+  bool dotSeen = false;
+  bool expSeen = false;
+  auto iter = S.begin();
+  auto iterEnd = S.end();
+
+  // Scan sequence of digits optionally containing a period
+  while (iter < iterEnd) {
+    char ch = *iter++;
+    if (isdigit(ch)) {
+      digitSeen = true;
+    } else if (ch == '.' && !dotSeen) {
+      dotSeen = true;
+    } else if (ch == 'e' || ch == 'E') { 
+      expSeen = true; 
+      break; 
+    } else 
+      return false;
+  }
+
+  assert(expSeen || iter == iterEnd);
+
+  if (!digitSeen)
+    return false;
+  if (!expSeen)
+    return true;
+  if (iter == iterEnd) 
+    return false;
+
+  // Scan exponent
+  if (*iter == '+' || *iter == '-') {
+    if (++iter == iterEnd)
+      return false;
+  }
+
+  assert(iter != iterEnd);
+
+  while (iter < iterEnd) {
+    if (!isdigit(*iter++)) 
+      return false;
+  }
+
+  return true;
+}
+
 inline bool isNumber(StringRef S) {
   static const char OctalChars[] = "01234567";
   if (S.startswith("0") &&
@@ -426,8 +520,7 @@
   if (S.equals(".inf") || S.equals(".Inf") || S.equals(".INF"))
     return true;
 
-  Regex FloatMatcher("^(\\.[0-9]+|[0-9]+(\\.[0-9]*)?)([eE][-+]?[0-9]+)?$");
-  if (FloatMatcher.match(S))
+  if (isFloat(S))
     return true;
 
   return false;
@@ -511,6 +604,7 @@
   virtual ~IO();
 
   virtual bool outputting() = 0;
+  virtual bool outputtingJson() { return false; }
 
   virtual unsigned beginSequence() = 0;
   virtual bool preflightElement(unsigned, void *&) = 0;
@@ -540,8 +634,11 @@
   virtual bool beginBitSetScalar(bool &) = 0;
   virtual bool bitSetMatch(const char*, bool) = 0;
   virtual void endBitSetScalar() = 0;
+  virtual bool bitSetMatchOther(uint32_t &) = 0;
+  virtual StringRef bitSetCaseUnmatched() = 0;
 
   virtual void scalarString(StringRef &, bool) = 0;
+  virtual void scalarJson(StringRef) {}
   virtual void blockScalarString(StringRef &) = 0;
 
   virtual void setError(const Twine &) = 0;
@@ -600,6 +697,15 @@
       Val = Val | ConstVal;
   }
 
+  template <typename T>
+  void bitSetCaseOther(T &Val, T Mask) {
+    uint32_t Temp = Val;
+    if (outputting()) 
+      Temp &= Mask;
+    if (bitSetMatchOther(Temp))
+      Val = static_cast<T>(Val | Temp);
+  }
+
   void *getContext();
   void setContext(void *);
 
@@ -617,8 +723,8 @@
     mapOptionalWithContext(Key, Val, Ctx);
   }
 
-  template <typename T>
-  void mapOptional(const char *Key, T &Val, const T &Default) {
+  template <typename T, typename U>
+  void mapOptional(const char *Key, T &Val, const U &Default) {
     EmptyContext Ctx;
     mapOptionalWithContext(Key, Val, Default, Ctx);
   }
@@ -644,8 +750,8 @@
     this->processKey(Key, Val, false, Ctx);
   }
 
-  template <typename T, typename Context>
-  void mapOptionalWithContext(const char *Key, T &Val, const T &Default,
+  template <typename T, typename U, typename Context>
+  void mapOptionalWithContext(const char *Key, T &Val, const U &Default,
                               Context &Ctx) {
     this->processKeyWithDefault(Key, Val, Default, false, Ctx);
   }
@@ -672,8 +778,8 @@
     }
   }
 
-  template <typename T, typename Context>
-  void processKeyWithDefault(const char *Key, T &Val, const T &DefaultValue,
+  template <typename T, typename U, typename Context>
+  void processKeyWithDefault(const char *Key, T &Val, const U &DefaultValue,
                              bool Required, Context &Ctx) {
     void *SaveInfo;
     bool UseDefault;
@@ -734,8 +840,45 @@
   }
 }
 
+template<typename T>
+inline std::string primitive_to_json(T value) {
+  return std::to_string(value);
+}
+
+template<>
+inline std::string primitive_to_json(bool value) {
+  return value ? "true" : "false";
+}
+
+template<typename T>
+typename std::enable_if<has_ScalarTraits<T>::value && has_ScalarJsonTraits<T>::value,void>::type
+yamlize(IO &io, T &Val, bool, EmptyContext &Ctx) {
+  if ( io.outputting() ) {
+    // Handle integer types differently on output to Json.
+    if (io.outputtingJson()) {
+      typename ScalarTraits<T>::json_type u = Val;
+      std::string Storage = primitive_to_json(u);
+      io.scalarJson(Storage);
+    } else {
+      llvm::SmallString<128> Storage;
+      llvm::raw_svector_ostream Buffer(Storage);
+      ScalarTraits<T>::output(Val, io.getContext(), Buffer);
+      StringRef Str = Buffer.str();
+      io.scalarString(Str, ScalarTraits<T>::mustQuote(Str));
+    }
+  }
+  else {
+    StringRef Str;
+    io.scalarString(Str, false);  // call mustQuote on Input?
+    StringRef Result = ScalarTraits<T>::input(Str, io.getContext(), Val);
+    if ( !Result.empty() ) {
+      io.setError(llvm::Twine(Result));
+    }
+  }
+}
+
 template <typename T>
-typename std::enable_if<has_ScalarTraits<T>::value, void>::type
+typename std::enable_if<has_ScalarTraits<T>::value && !has_ScalarJsonTraits<T>::value,void>::type
 yamlize(IO &io, T &Val, bool, EmptyContext &Ctx) {
   if ( io.outputting() ) {
     std::string Storage;
@@ -819,8 +962,59 @@
   char missing_yaml_trait_for_type[sizeof(MissingTrait<T>)];
 }
 
+template<typename T>
+T &mutable_ref(const T& ref) {
+  return const_cast<T&>(ref);
+}
+
+template<typename T>
+typename std::enable_if<has_IteratorMethodTraits<T>::value,void>::type
+yamlize(IO &io, T &Seq, bool, EmptyContext &Ctx) {
+  assert(io.outputting());
+  if ( has_FlowTraits< SequenceTraits<T> >::value ) {
+    unsigned incnt = io.beginFlowSequence();
+    typename SequenceTraits<T>::iterator iter = SequenceTraits<T>::begin(io, Seq);
+    typename SequenceTraits<T>::iterator iterEnd = SequenceTraits<T>::end(io, Seq);
+    for (; iter < iterEnd; SequenceTraits<T>::next(iter, iterEnd)) {
+      void *SaveInfo;
+      if ( io.preflightFlowElement(0, SaveInfo) ) {
+        yamlize(io, mutable_ref(*iter), true, Ctx);
+        io.postflightFlowElement(SaveInfo);
+      }
+    }
+    io.endFlowSequence();
+  }
+  else {
+    unsigned incnt = io.beginSequence();
+    typename SequenceTraits<T>::iterator iter = SequenceTraits<T>::begin(io, Seq);
+    typename SequenceTraits<T>::iterator iterEnd = SequenceTraits<T>::end(io, Seq);
+    for (; iter < iterEnd; SequenceTraits<T>::next(iter, iterEnd)) {
+      void *SaveInfo;
+      if ( io.preflightElement(0, SaveInfo) ) {
+        yamlize(io, mutable_ref(*iter), true, Ctx);
+        io.postflightElement(SaveInfo);
+      }
+    }
+    io.endSequence();
+  }
+}
+
+template <typename T>
+typename std::enable_if<has_SequenceValidateTraits<T>::value,void>::type
+validateSequenceTraits(IO &io, T &Seq) {
+  StringRef err = SequenceTraits<T>::validate(io, Seq);
+  if (!err.empty())
+    io.setError(err);
+}
+
+template <typename T>
+typename std::enable_if<!has_SequenceValidateTraits<T>::value,void>::type
+validateSequenceTraits(IO &io, T &Seq) {
+}
+
+
 template <typename T, typename Context>
-typename std::enable_if<has_SequenceTraits<T>::value, void>::type
+typename std::enable_if<has_SequenceMethodTraits<T>::value, void>::type
 yamlize(IO &io, T &Seq, bool, Context &Ctx) {
   if ( has_FlowTraits< SequenceTraits<T> >::value ) {
     unsigned incnt = io.beginFlowSequence();
@@ -846,6 +1040,7 @@
     }
     io.endSequence();
   }
+  validateSequenceTraits(io, Seq);
 }
 
 template<>
@@ -853,6 +1048,7 @@
   static void output(const bool &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, bool &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = bool;
 };
 
 template<>
@@ -874,6 +1070,7 @@
   static void output(const uint8_t &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, uint8_t &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = uint8_t;
 };
 
 template<>
@@ -881,6 +1078,7 @@
   static void output(const uint16_t &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, uint16_t &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = uint16_t;
 };
 
 template<>
@@ -888,6 +1086,7 @@
   static void output(const uint32_t &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, uint32_t &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = uint32_t;
 };
 
 template<>
@@ -895,6 +1094,7 @@
   static void output(const uint64_t &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, uint64_t &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = uint64_t;
 };
 
 template<>
@@ -902,6 +1102,7 @@
   static void output(const int8_t &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, int8_t &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = int8_t;
 };
 
 template<>
@@ -909,6 +1110,7 @@
   static void output(const int16_t &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, int16_t &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = int16_t;
 };
 
 template<>
@@ -916,6 +1118,7 @@
   static void output(const int32_t &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, int32_t &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = int32_t;
 };
 
 template<>
@@ -923,6 +1126,7 @@
   static void output(const int64_t &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, int64_t &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = int64_t;
 };
 
 template<>
@@ -930,6 +1134,7 @@
   static void output(const float &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, float &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = float;
 };
 
 template<>
@@ -937,6 +1142,7 @@
   static void output(const double &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, double &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = double;
 };
 
 // For endian types, we just use the existing ScalarTraits for the underlying
@@ -1085,6 +1291,8 @@
   bool beginBitSetScalar(bool &) override;
   bool bitSetMatch(const char *, bool ) override;
   void endBitSetScalar() override;
+  bool bitSetMatchOther(uint32_t &) override;
+  StringRef bitSetCaseUnmatched() override;
   void scalarString(StringRef &, bool) override;
   void blockScalarString(StringRef &) override;
   void setError(const Twine &message) override;
@@ -1216,6 +1424,8 @@
   bool beginBitSetScalar(bool &) override;
   bool bitSetMatch(const char *, bool ) override;
   void endBitSetScalar() override;
+  bool bitSetMatchOther(uint32_t &) override;
+  StringRef bitSetCaseUnmatched() override;
   void scalarString(StringRef &, bool) override;
   void blockScalarString(StringRef &) override;
   void setError(const Twine &message) override;
@@ -1294,6 +1504,7 @@
   static void output(const Hex8 &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, Hex8 &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = uint8_t;
 };
 
 template<>
@@ -1301,6 +1512,7 @@
   static void output(const Hex16 &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, Hex16 &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = uint16_t;
 };
 
 template<>
@@ -1308,6 +1520,7 @@
   static void output(const Hex32 &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, Hex32 &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = uint32_t;
 };
 
 template<>
@@ -1315,6 +1528,7 @@
   static void output(const Hex64 &, void*, llvm::raw_ostream &);
   static StringRef input(StringRef, void*, Hex64 &);
   static bool mustQuote(StringRef) { return false; }
+  using json_type = uint64_t;
 };
 
 // Define non-member operator>> so that Input can stream in a document list.
@@ -1357,6 +1571,18 @@
   return yin;
 }
 
+// Define non-member operator>> so that Input can stream in a string as a
+// document.
+template <typename T>
+inline
+typename std::enable_if<has_ScalarTraits<T>::value, Input &>::type
+operator>>(Input &yin, T &docStr) {
+  EmptyContext Ctx;
+  yin.setCurrentDocument();
+  yamlize(yin, docStr, true, Ctx);
+  return yin;
+}
+
 // Define non-member operator>> so that Input can stream in a block scalar.
 template <typename T>
 inline
