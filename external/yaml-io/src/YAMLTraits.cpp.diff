--- ../../../llvm_git/llvm/lib/Support/YAMLTraits.cpp	2018-06-23 19:55:22.000000000 -0700
+++ ./src/Support/YAMLTraits.cpp	2018-06-27 21:30:37.000000000 -0700
@@ -331,6 +331,45 @@
   }
 }
 
+bool Input::bitSetMatchOther(uint32_t &Val) {
+  if (EC)
+    return false;
+  if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode)) {
+    unsigned Index = 0;
+    for (auto &N : SQ->Entries) {
+      if (ScalarHNode *SN = dyn_cast<ScalarHNode>(N.get())) {
+        StringRef S = SN->value();
+        if (!S.empty() && isdigit(S.front()) && !S.getAsInteger(0, Val)) {
+          BitValuesUsed[Index] = true;
+          return true;
+        }
+      } else {
+        setError(CurrentNode, "unexpected scalar in sequence of bit values");
+      }
+      ++Index;
+    }
+  } else {
+    setError(CurrentNode, "expected sequence of bit values");
+  }
+  return false;
+}
+
+StringRef Input::bitSetCaseUnmatched() {
+  if (EC)
+    return "";
+  SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode);
+  if (!SQ)
+    return "";
+  assert(BitValuesUsed.size() == SQ->Entries.size());
+  for (unsigned i = 0; i < SQ->Entries.size(); ++i) {
+    if (!BitValuesUsed[i]) {
+      if (ScalarHNode *SN = dyn_cast<ScalarHNode>(SQ->Entries[i].get()))
+        return SN->value();
+    }
+  }
+  return "";
+}
+
 void Input::scalarString(StringRef &S, QuotingType) {
   if (ScalarHNode *SN = dyn_cast<ScalarHNode>(CurrentNode)) {
     S = SN->value();
@@ -618,6 +657,23 @@
   this->outputUpToEndOfLine(" ]");
 }
 
+
+bool Output::bitSetMatchOther(uint32_t &Val) {
+  if (Val != 0) {
+    if (NeedBitValueComma)
+      output(", ");
+    char buf[16];
+    auto len = format("'0x%08X'", Val).print(buf, sizeof(buf));
+    this->output(StringRef{buf, len});
+    NeedBitValueComma = true;
+  }
+  return false;
+}
+
+StringRef Output::bitSetCaseUnmatched() {
+  return "";
+}
+
 void Output::scalarString(StringRef &S, QuotingType MustQuote) {
   this->newLineCheck();
   if (S.empty()) {
@@ -644,7 +700,7 @@
   // present, and will be escaped using a variety of unicode-scalar and special short-form
   // escapes. This is handled in yaml::escape.
   if (MustQuote == QuotingType::Double) {
-    output(yaml::escape(Base, /* EscapePrintable= */ false));
+    output(yaml::escape(S, /* EscapePrintable= */ false));
     this->outputUpToEndOfLine(Quote);
     return;
   }
