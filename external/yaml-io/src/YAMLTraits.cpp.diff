--- /Users/bfish/code/llvm/lib/Support/YAMLTraits.cpp	2014-11-02 14:02:34.000000000 -0700
+++ src/Support/YAMLTraits.cpp	2014-12-26 11:03:34.000000000 -0700
@@ -170,7 +170,17 @@
 unsigned Input::beginSequence() {
   if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode)) {
     return SQ->Entries.size();
+  } else if (dyn_cast<EmptyHNode>(CurrentNode)) {
+    return 0;
   }
+
+  // Treat case where there's a scalar "null" value as an empty sequence.
+  if (ScalarHNode *SN = dyn_cast<ScalarHNode>(CurrentNode)) {
+    if (isNull(SN->value()))
+      return 0;
+  }
+  // Any other type of HNode is an error.
+  setError(CurrentNode, "not a sequence");
   return 0;
 }
 
@@ -193,10 +203,7 @@
 }
 
 unsigned Input::beginFlowSequence() {
-  if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode)) {
-    return SQ->Entries.size();
-  }
-  return 0;
+  return beginSequence();
 }
 
 bool Input::preflightFlowElement(unsigned index, void *&SaveInfo) {
@@ -343,7 +350,13 @@
         memcpy(Buf, &StringStorage[0], Len);
         KeyStr = StringRef(Buf, Len);
       }
-      auto ValueHNode = this->createHNodes(KVN.getValue());
+      Node *ValueNode = KVN.getValue();
+      if (!ValueNode) {
+        assert(Strm->failed() && "Root is NULL iff parsing failed");
+        EC = make_error_code(errc::invalid_argument);
+        break;
+      }
+      auto ValueHNode = this->createHNodes(ValueNode);
       if (EC)
         break;
       mapHNode->Mapping[KeyStr] = std::move(ValueHNode);
