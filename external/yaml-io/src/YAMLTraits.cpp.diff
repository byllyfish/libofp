--- YAMLTraits.cpp	2015-03-10 15:55:09.000000000 -0700
+++ YAMLTraits.cpp	2015-03-21 10:24:41.000000000 -0700
@@ -296,6 +296,29 @@
   }
 }
 
+bool Input::bitSetMatchOther(uint32_t &Val) {
+  if (EC)
+    return false;
+  if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode)) {
+    unsigned Index = 0;
+    for (auto &N : SQ->Entries) {
+      if (ScalarHNode *SN = dyn_cast<ScalarHNode>(N.get())) {
+        StringRef S = SN->value();
+        if (!S.empty() && isdigit(S.front()) && !S.getAsInteger(0, Val)) {
+          BitValuesUsed[Index] = true;
+          return true;
+        }
+      } else {
+        setError(CurrentNode, "unexpected scalar in sequence of bit values");
+      }
+      ++Index;
+    }
+  } else {
+    setError(CurrentNode, "expected sequence of bit values");
+  }
+  return false;
+}
+
 void Input::scalarString(StringRef &S, bool) {
   if (ScalarHNode *SN = dyn_cast<ScalarHNode>(CurrentNode)) {
     S = SN->value();
@@ -353,7 +376,13 @@
         memcpy(Buf, &StringStorage[0], Len);
         KeyStr = StringRef(Buf, Len);
       }
-      auto ValueHNode = this->createHNodes(KVN.getValue());
+      Node *ValueNode = KVN.getValue();
+      if (!ValueNode) {
+        assert(Strm->failed() && "Root is NULL iff parsing failed");
+        EC = make_error_code(errc::invalid_argument);
+        break;
+      }
+      auto ValueHNode = this->createHNodes(ValueNode);
       if (EC)
         break;
       mapHNode->Mapping[KeyStr] = std::move(ValueHNode);
@@ -552,6 +581,19 @@
   this->outputUpToEndOfLine(" ]");
 }
 
+
+bool Output::bitSetMatchOther(uint32_t &Val) {
+  if (Val != 0) {
+    if (NeedBitValueComma)
+      output(", ");
+    char buf[16];
+    auto len = format("'0x%08X'", Val).print(buf, sizeof(buf));
+    this->output(StringRef{buf, len});
+    NeedBitValueComma = true;
+  }
+  return false;
+}
+
 void Output::scalarString(StringRef &S, bool MustQuote) {
   this->newLineCheck();
   if (S.empty()) {
