//
// !! DO NOT EDIT THIS FILE!!
//
// This file is automatically generated during the build
// process. Please make your changes to `ofp/oxmfields.tab`.

#include "ofp/oxmfields.h"
#include "ofp/oxmlist.h"
#include <iostream>

using namespace ofp;

// We need to define this array to get the linker to compile this tool.
const ofp::OXMTypeInfo ofp::OXMTypeInfoArray[] = {
	{"none", nullptr, 0, false}
};
const size_t ofp::OXMTypeInfoArraySize = 0;

static void WritePrereq(const char *name, const UInt8 *data, size_t len)
{
  std::cout << "static const ofp::UInt8 data_" << name << "[" << len << "]={";
  for (size_t i = 0; i < len; ++i) {
    std::cout << unsigned(data[i]) << ",";
  }
  std::cout << "};\n";
  std::cout << "const ofp::OXMRange ofp::OXMPrereq_" << name << "{data_" << name << "," << len <<"};\n";
}


static void WriteOXMTypeInfo(OXMType type, bool maskSupported, const char *name, const char *prereqs) {
  std::cout << "{ \"" << name << "\", " << prereqs << ", " << type << ", " << maskSupported << "},\n";
}

int main() {
  std::cout << "#include \"ofp/oxmfields.h\"\n";
  
  {
    OXMList list;
    list.add(OFB_IN_PORT{0},OFB_IN_PORT{0});
    WritePrereq("OFB_IN_PHY_PORT", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_VLAN_VID{0x1000},OFB_VLAN_VID{0x1000});
    WritePrereq("OFB_VLAN_PCP", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    WritePrereq("OFB_IP_DSCP", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    WritePrereq("OFB_IP_ECN", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    WritePrereq("OFB_IP_PROTO", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    WritePrereq("OFB_IPV4_SRC", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    WritePrereq("OFB_IPV4_DST", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{6});
    WritePrereq("OFB_TCP_SRC", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{6});
    WritePrereq("OFB_TCP_DST", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{17});
    WritePrereq("OFB_UDP_SRC", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{17});
    WritePrereq("OFB_UDP_DST", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{132});
    WritePrereq("OFB_SCTP_SRC", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{132});
    WritePrereq("OFB_SCTP_DST", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{1});
    WritePrereq("OFB_ICMPV4_TYPE", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{1});
    WritePrereq("OFB_ICMPV4_CODE", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0806});
    WritePrereq("OFB_ARP_OP", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0806});
    WritePrereq("OFB_ARP_SPA", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0806});
    WritePrereq("OFB_ARP_TPA", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0806});
    WritePrereq("OFB_ARP_SHA", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0806});
    WritePrereq("OFB_ARP_THA", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x86dd});
    WritePrereq("OFB_IPV6_SRC", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x86dd});
    WritePrereq("OFB_IPV6_DST", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x86dd});
    WritePrereq("OFB_IPV6_FLABEL", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{58});
    WritePrereq("OFB_ICMPV6_TYPE", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{58});
    WritePrereq("OFB_ICMPV6_CODE", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{58});
    list.add(OFB_ICMPV6_TYPE{135});
    list.add(OFB_ICMPV6_TYPE{136});
    WritePrereq("OFB_IPV6_ND_TARGET", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{58});
    list.add(OFB_ICMPV6_TYPE{135});
    WritePrereq("OFB_IPV6_ND_SLL", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x0800});
    list.add(OFB_ETH_TYPE{0x86dd});
    list.add(OFB_IP_PROTO{58});
    list.add(OFB_ICMPV6_TYPE{136});
    WritePrereq("OFB_IPV6_ND_TLL", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x8847});
    list.add(OFB_ETH_TYPE{0x8848});
    WritePrereq("OFB_MPLS_LABEL", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x8847});
    list.add(OFB_ETH_TYPE{0x8848});
    WritePrereq("OFB_MPLS_TC", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x8847});
    list.add(OFB_ETH_TYPE{0x8848});
    WritePrereq("OFP_MPLS_BOS", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x88E7});
    WritePrereq("OFB_PBB_ISID", list.data(), list.size());
  }

  {
    OXMList list;
    list.add(OFB_ETH_TYPE{0x86dd});
    WritePrereq("OFB_IPV6_EXTHDR", list.data(), list.size());
  }

std::cout << "const ofp::OXMTypeInfo ofp::OXMTypeInfoArray[40] = {\n";WriteOXMTypeInfo(OXMType{0x8000,0,4}, false, "OFB_IN_PORT", "nullptr");
WriteOXMTypeInfo(OXMType{0x8000,1,4}, false, "OFB_IN_PHY_PORT", "&ofp::OXMPrereq_OFB_IN_PHY_PORT");
WriteOXMTypeInfo(OXMType{0x8000,2,8}, true, "OFB_METADATA", "nullptr");
WriteOXMTypeInfo(OXMType{0x8000,3,6}, true, "OFB_ETH_DST", "nullptr");
WriteOXMTypeInfo(OXMType{0x8000,4,6}, true, "OFB_ETH_SRC", "nullptr");
WriteOXMTypeInfo(OXMType{0x8000,5,2}, false, "OFB_ETH_TYPE", "nullptr");
WriteOXMTypeInfo(OXMType{0x8000,6,2}, true, "OFB_VLAN_VID", "nullptr");
WriteOXMTypeInfo(OXMType{0x8000,7,1}, false, "OFB_VLAN_PCP", "&ofp::OXMPrereq_OFB_VLAN_PCP");
WriteOXMTypeInfo(OXMType{0x8000,8,1}, false, "OFB_IP_DSCP", "&ofp::OXMPrereq_OFB_IP_DSCP");
WriteOXMTypeInfo(OXMType{0x8000,9,1}, false, "OFB_IP_ECN", "&ofp::OXMPrereq_OFB_IP_ECN");
WriteOXMTypeInfo(OXMType{0x8000,10,1}, false, "OFB_IP_PROTO", "&ofp::OXMPrereq_OFB_IP_PROTO");
WriteOXMTypeInfo(OXMType{0x8000,11,4}, true, "OFB_IPV4_SRC", "&ofp::OXMPrereq_OFB_IPV4_SRC");
WriteOXMTypeInfo(OXMType{0x8000,12,4}, true, "OFB_IPV4_DST", "&ofp::OXMPrereq_OFB_IPV4_DST");
WriteOXMTypeInfo(OXMType{0x8000,13,2}, false, "OFB_TCP_SRC", "&ofp::OXMPrereq_OFB_TCP_SRC");
WriteOXMTypeInfo(OXMType{0x8000,14,2}, false, "OFB_TCP_DST", "&ofp::OXMPrereq_OFB_TCP_DST");
WriteOXMTypeInfo(OXMType{0x8000,15,2}, false, "OFB_UDP_SRC", "&ofp::OXMPrereq_OFB_UDP_SRC");
WriteOXMTypeInfo(OXMType{0x8000,16,2}, false, "OFB_UDP_DST", "&ofp::OXMPrereq_OFB_UDP_DST");
WriteOXMTypeInfo(OXMType{0x8000,17,2}, false, "OFB_SCTP_SRC", "&ofp::OXMPrereq_OFB_SCTP_SRC");
WriteOXMTypeInfo(OXMType{0x8000,18,2}, false, "OFB_SCTP_DST", "&ofp::OXMPrereq_OFB_SCTP_DST");
WriteOXMTypeInfo(OXMType{0x8000,19,1}, false, "OFB_ICMPV4_TYPE", "&ofp::OXMPrereq_OFB_ICMPV4_TYPE");
WriteOXMTypeInfo(OXMType{0x8000,20,1}, false, "OFB_ICMPV4_CODE", "&ofp::OXMPrereq_OFB_ICMPV4_CODE");
WriteOXMTypeInfo(OXMType{0x8000,21,2}, false, "OFB_ARP_OP", "&ofp::OXMPrereq_OFB_ARP_OP");
WriteOXMTypeInfo(OXMType{0x8000,22,4}, true, "OFB_ARP_SPA", "&ofp::OXMPrereq_OFB_ARP_SPA");
WriteOXMTypeInfo(OXMType{0x8000,23,4}, true, "OFB_ARP_TPA", "&ofp::OXMPrereq_OFB_ARP_TPA");
WriteOXMTypeInfo(OXMType{0x8000,24,6}, true, "OFB_ARP_SHA", "&ofp::OXMPrereq_OFB_ARP_SHA");
WriteOXMTypeInfo(OXMType{0x8000,25,6}, true, "OFB_ARP_THA", "&ofp::OXMPrereq_OFB_ARP_THA");
WriteOXMTypeInfo(OXMType{0x8000,26,16}, true, "OFB_IPV6_SRC", "&ofp::OXMPrereq_OFB_IPV6_SRC");
WriteOXMTypeInfo(OXMType{0x8000,27,16}, true, "OFB_IPV6_DST", "&ofp::OXMPrereq_OFB_IPV6_DST");
WriteOXMTypeInfo(OXMType{0x8000,28,4}, true, "OFB_IPV6_FLABEL", "&ofp::OXMPrereq_OFB_IPV6_FLABEL");
WriteOXMTypeInfo(OXMType{0x8000,29,1}, false, "OFB_ICMPV6_TYPE", "&ofp::OXMPrereq_OFB_ICMPV6_TYPE");
WriteOXMTypeInfo(OXMType{0x8000,30,1}, false, "OFB_ICMPV6_CODE", "&ofp::OXMPrereq_OFB_ICMPV6_CODE");
WriteOXMTypeInfo(OXMType{0x8000,31,16}, false, "OFB_IPV6_ND_TARGET", "&ofp::OXMPrereq_OFB_IPV6_ND_TARGET");
WriteOXMTypeInfo(OXMType{0x8000,32,6}, false, "OFB_IPV6_ND_SLL", "&ofp::OXMPrereq_OFB_IPV6_ND_SLL");
WriteOXMTypeInfo(OXMType{0x8000,33,6}, false, "OFB_IPV6_ND_TLL", "&ofp::OXMPrereq_OFB_IPV6_ND_TLL");
WriteOXMTypeInfo(OXMType{0x8000,34,4}, false, "OFB_MPLS_LABEL", "&ofp::OXMPrereq_OFB_MPLS_LABEL");
WriteOXMTypeInfo(OXMType{0x8000,35,1}, false, "OFB_MPLS_TC", "&ofp::OXMPrereq_OFB_MPLS_TC");
WriteOXMTypeInfo(OXMType{0x8000,36,1}, false, "OFP_MPLS_BOS", "&ofp::OXMPrereq_OFP_MPLS_BOS");
WriteOXMTypeInfo(OXMType{0x8000,37,4}, true, "OFB_PBB_ISID", "&ofp::OXMPrereq_OFB_PBB_ISID");
WriteOXMTypeInfo(OXMType{0x8000,38,8}, true, "OFB_TUNNEL_ID", "nullptr");
WriteOXMTypeInfo(OXMType{0x8000,39,2}, true, "OFB_IPV6_EXTHDR", "&ofp::OXMPrereq_OFB_IPV6_EXTHDR");

	  std::cout << "};\n";
	std::cout << "const size_t ofp::OXMTypeInfoArraySize=40;\n";}
