# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../external/googletest
BOOST_DIR = ../external/boost_1_54_0_asio
BOOST_OBJ = $(BOOST_DIR)/libs/system/src/error_code.o

LLVM_DIR = ../../llvm/include
LLVM_BUILD_DIR = ../../llvm-build/include
#LLVM_LIB = $(LLVM_DIR)/../lib
#LLVM_OBJ = $(LLVM_LIB)/Support/YAMLParser.o $(LLVM_LIB)/Support/YAMLTraits.o \
#   $(LLVM_LIB)/Support/raw_ostream.o $(LLVM_LIB)/Support/SmallVector.o \
#   $(LLVM_LIB)/Support/StringRef.o $(LLVM_LIB)/Support/APInt.o $(LLVM_LIB)/Support/MemoryBuffer.o \
#   $(LLVM_LIB)/Support/Allocator.o $(LLVM_LIB)/Support/system_error.o \
#   $(LLVM_LIB)/Support/SourceMgr.o $(LLVM_LIB)/Support/Twine.o \
#   $(LLVM_LIB)/Support/Hashing.o $(LLVM_LIB)/Support/FoldingSet.o \
#   $(LLVM_LIB)/Support/Process.o $(LLVM_LIB)/Support/Path.o \
#   $(LLVM_LIB)/Support/TimeValue.o $(LLVM_LIB)/Support/Program.o \
#   $(LLVM_LIB)/Support/Memory.o $(LLVM_LIB)/Support/Valgrind.o \
#   $(LLVM_LIB)/Support/Errno.o #$(LLVM_LIB)/Support/Debug.o \
#   #$(LLVM_LIB)/Support/CommandLine.o 

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include 

CPPFLAGS += -I ../include -I ofp -isystem $(BOOST_DIR) -isystem $(LLVM_DIR) -isystem $(LLVM_BUILD_DIR) -std=c++11

# Need -stdlib on Mac OS X.
ifeq ($(shell uname -s),Darwin)
 CPPFLAGS += -stdlib=libc++
 WARNINGS = -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-unused-parameter -Wno-documentation
else
 WARNINGS = -Wall
endif

# llvm files expect these...

CPPFLAGS += -D __STDC_LIMIT_MACROS -D __STDC_CONSTANT_MACROS

# Flags passed to the C++ compiler.
CXXFLAGS += -g $(WARNINGS) -pthread 

LDFLAGS += -L ../external/yaml-io/ -lyamlio

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = ofp_test
TEST_SOURCES := $(wildcard ofp/*_unittest.cpp)
TEST_OBJECTS := $(patsubst %.cpp,%.o,$(TEST_SOURCES))
TEST_DEPEND  := $(patsubst %.cpp,%.d,$(TEST_SOURCES))

MAINS := $(wildcard ../src/ofp/*_main.cpp)
LIB_SOURCES := $(filter-out $(MAINS),$(wildcard ../src/ofp/*.cpp) $(wildcard ../src/ofp/impl/*.cpp) $(wildcard ../src/ofp/yaml/*.cpp))
LIB_OBJECTS := $(patsubst %.cpp,%.o,$(LIB_SOURCES))
LIB_DEPEND  := $(patsubst %.cpp,%.d,$(LIB_SOURCES))

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all: $(TESTS)

.PHONY: clean
clean:
	rm -f $(TESTS) gtest.a gtest_main.a $(TEST_OBJECTS) $(LIB_OBJECTS) $(TEST_DEPEND) $(LIB_DEPEND)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.


ofp_test : $(TEST_OBJECTS) $(LIB_OBJECTS) gtest_main.a $(BOOST_OBJ)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) $^ -o $@

#oxmfields_compile : $(LIB_OBJECTS) ../src/ofp/oxmfields_compile_main.o $(BOOST_OBJ)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

#oxmfields_compile2 : $(LIB_OBJECTS) ../src/ofp/oxmfields_main.o $(BOOST_OBJ)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

#oxmfields : ../include/ofp/oxmfields.h ../src/ofp/oxmfields.cpp

#../src/ofp/oxmfields_main.cpp : oxmfields_compile ../src/ofp/oxmfields.tab
#	./oxmfields_compile < ../src/ofp/oxmfields.tab > $@

#../include/ofp/oxmfields.h : oxmfields_compile ../src/ofp/oxmfields.tab
#	./oxmfields_compile -h < ../src/ofp/oxmfields.tab > ../include/ofp/oxmfields.h

#../src/ofp/oxmfields.cpp : oxmfields_compile2
#	./oxmfields_compile2 > ../src/ofp/oxmfields.cpp

#sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc

#sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \
#                     $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc

#sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@


%.d : %.cpp
	$(CC) -MM -MT '$*.o $@' -MF $@ $(CPPFLAGS) $<
	
#	rm -f $@; \
#	$(CC) -MM -MT '$*.o,$@' -MF $@.$$$$ $(CPPFLAGS) $< ; \
#	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
#	rm -f $@.$$$$


-include $(TEST_SOURCES:.cpp=.d)
-include $(LIB_SOURCES:.cpp=.d)
