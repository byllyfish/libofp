// Copyright (c) 2015-2017 William W. Fisher (at gmail dot com)
// This file is distributed under the MIT License.

#include "ofp/matchpacket.h"
#include "ofp/unittest.h"

using namespace ofp;

static void testPacket(const char *hex, const char *outHex) {
  ByteList buf{HexToRawData(hex)};

  // Insert two zero bytes at the beginning. MatchPacket expects packet data
  // to be aligned at 2 bytes past the 8-byte alignment.
  buf.insertZeros(buf.begin(), 2);

  ASSERT_TRUE(IsPtrAligned(buf.data(), 8));

  MatchPacket match{ByteRange{buf.data() + 2, buf.size() - 2}};
  EXPECT_HEX(outHex, match.data(), match.size());
  EXPECT_TRUE(match.toRange().validateInput());
}

TEST(matchpacket, ethernet) {
  testPacket("FFFFFFFFFFFF0000000000010806",
             "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806");

  // Unknown type
  testPacket("FFFFFFFFFFFF0000000000010807",
             "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0807");

  // 1 byte short
  testPacket("FFFFFFFFFFFF00000000000108", "FFFF0806:00FFFFFF0000");

  // 1 byte long
  testPacket("FFFFFFFFFFFF000000000001080601",
             "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806 "
             "FFFF0806:00FFFFFF000E");

  // Vlan header missing
  testPacket("FFFFFFFFFFFF0000000000018100",
             "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:8100");

  // Vlan header too small
  testPacket("FFFFFFFFFFFF0000000000018100 000102",
             "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:8100 "
             "FFFF080600FFFFFF:000E");
}

TEST(matchpacket, arp) {
  testPacket(
      "FFFFFFFFFFFF000000000001080600010800060400010000000000010A00000100000000"
      "00000A000002",
      "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806 80002A02:0001 "
      "80002C04:0A000001 80002E04:0A000002 80003006:000000000001 "
      "80003206:000000000000");

  // 1 byte short
  testPacket(
      "FFFFFFFFFFFF000000000001080600010800060400010000000000010A00000100000000"
      "00000A0000",
      "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806 "
      "FFFF0806:00FFFFFF000E");

  // 1 byte long
  testPacket(
      "FFFFFFFFFFFF000000000001080600010800060400010000000000010A00000100000000"
      "00000A00000201",
      "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806 80002A02:0001 "
      "80002C04:0A000001 80002E04:0A000002 80003006:000000000001 "
      "80003206:000000000000 FFFF0806:00FFFFFF002A");

  // Unexpected arp prefix
  testPacket(
      "FFFFFFFFFFFF000000000001080600010800060500010000000000010A00000100000000"
      "00000A000002",
      "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806 "
      "FFFF080600FFFFFF:000E");

  // Padded with zeros to 60 bytes
  testPacket("FFFFFFFFFFFF0E0000000001810000FA080600010800060400010E0000000001A30789FE000000000000A30789790000000000000000000000000000", "80000606:FFFFFFFFFFFF 80000806:0E0000000001 80000C02:10FA 80000E01:00 80000A02:0806 80002A02:0001 80002C04:A30789FE 80002E04:A3078979 80003006:0E0000000001 80003206:000000000000");

  // Padded with _almost_ all zeros to 60 bytes
  testPacket("FFFFFFFFFFFF0E0000000001810000FA080600010800060400010E0000000001A30789FE000000000000A30789790000000000000000000000000001", "80000606:FFFFFFFFFFFF 80000806:0E0000000001 80000C02:10FA 80000E01:00 80000A02:0806 80002A02:0001 80002C04:A30789FE 80002E04:A3078979 80003006:0E0000000001 80003206:000000000000 FFFF0806:00FFFFFF002E");
}

TEST(matchpacket, ipv4) {
  // Valid IPv4 Header only
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007706888899999999AAAAAAAA ",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:06 80001604:99999999 80001804:AAAAAAAA "
      "00013A01:77");

  // Wrong IP version
  testPacket(
      "1111111111112222222222220800 "
      "55334444555500007706888899999999AAAAAAAA ",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 "
      "FFFF080600FFFFFF000E");

  // IP header too short
  testPacket(
      "1111111111112222222222220800 "
      "44334444555500007706888899999999AAAAAAAA ",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 "
      "FFFF080600FFFFFF000E");

  // IPv4 fragment
  testPacket(
      "1111111111112222222222220800 "
      "453344445555EDDD7706888899999999AAAAAAAA ",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:06 80001604:99999999 80001804:AAAAAAAA 00013401:03 "
      "00013A01:77");

  // IP header longer than remaining data
  testPacket(
      "1111111111112222222222220800 "
      "49334444555500007706888899999999AAAAAAAA 12345678",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 "
      "FFFF080600FFFFFF000E");

  // IP header one byte too short
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007706888899999999AAAAAA",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 "
      "FFFF080600FFFFFF000E");

  // Unknown IPv4 protocol
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007791888899999999AAAAAAAA ",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:91 80001604:99999999 80001804:AAAAAAAA "
      "00013A01:77");
}

TEST(matchpacket, ipv4_totalLen) {
  // Total Length < hdrLen
  testPacket(
      "1111111111112222222222220800 "
      "45330011555500007706888899999999AAAAAAAA ",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 "
      "FFFF080600FFFFFF000E");

  // Total Length < data length
  testPacket(
      "1111111111112222222222220800 "
      "45330015555500007706888899999999AAAAAAAA 01020304",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:06 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "FFFF080600FFFFFF:0022");
}

TEST(matchpacket, tcpv4) {
  // exact size
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007706888899999999AAAAAAAA "
      "BBBBCCCCDDDDDDDDDDDDDDDDEEEEFFFFFFFFFFFF",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:06 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "80001A02:BBBB 80001C02:CCCC 00014402:0EEE");

  // 1 byte long (todo: check ipv4 len?)
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007706888899999999AAAAAAAA "
      "BBBBCCCCDDDDDDDDDDDDDDDDEEEEFFFFFFFFFFFF 01",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:06 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "80001A02:BBBB 80001C02:CCCC 00014402:0EEE FFFF0806:00FFFFFF0036");

  // 1 byte short
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007706888899999999AAAAAAAA "
      "BBBBCCCCDDDDDDDDDDDDDDDDEEEEFFFFFFFFFF",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:06 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "FFFF0806:00FFFFFF0022");
}

TEST(matchpacket, udpv4) {
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007711888899999999AAAAAAAA BBBBCCCCDDDDEEEE",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:11 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "80001E02:BBBB 80002002:CCCC");
}

TEST(matchpacket, icmpv4) {
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007701888899999999AAAAAAAA BBCCDDDDDDDD",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:01 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "80002601:BB 80002801:CC FFFF0806:00FFFFFF0026");

  // exact size
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007701888899999999AAAAAAAA BBCCDDDD",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:01 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "80002601:BB 80002801:CC");

  // 1 byte short
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007701888899999999AAAAAAAA BBCCDD",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:01 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "FFFF0806:00FFFFFF0022");
}

TEST(matchpacket, icmpv6) {
  testPacket(
      "3333FF718C4C32FA25D4234186DD6000000000183AFF0000000000000000000000000000"
      "0000FF0200000000000000000001FF718C4C87009A9E00000000FE80000000000000FC0C"
      "CDFFFE718C4C",
      "80000606:3333FF718C4C 80000806:32FA25D42341 80000A02:86DD"
      "00013A01:FF 80001401:3A "
      "80003410:00000000000000000000000000000000 "
      "80003610:FF0200000000000000000001FF718C4C 80003A01:87 "
      "80003C01:00 80003E10:FE80000000000000FC0CCDFFFE718C4C 80004E02:0001");

  // exact size
  testPacket(
      "3333FF718C4C32FA25D4234186DD6000000000183AFF0000000000000000000000000000"
      "0000FF0200000000000000000001FF718C4C87009A9E",
      "80000606:3333FF718C4C 80000806:32FA25D42341 80000A02:86DD"
      "00013A01:FF 80001401:3A "
      "80003410:00000000000000000000000000000000 "
      "80003610:FF0200000000000000000001FF718C4C 80003A01:87 "
      "80003C01:00 80004E02:0001");

  // 1 byte short
  testPacket(
      "3333FF718C4C32FA25D4234186DD6000000000183AFF0000000000000000000000000000"
      "0000FF0200000000000000000001FF718C4C87009A",
      "80000606:3333FF718C4C 80000806:32FA25D42341 80000A02:86DD"
      "00013A01:FF 80001401:3A "
      "80003410:00000000000000000000000000000000 "
      "80003610:FF0200000000000000000001FF718C4C"
      "80004E02:0001 FFFF0806:00FFFFFF0036");
}

TEST(matchpacket, tcpv6) {
  testPacket(
      "11111111111122222222222286DD "
      "633444445555116677777777777777777777777777777777888888888888888888888888"
      "88888888 BBBBCCCCDDDDDDDDDDDDDDDDEEEEFFFFFFFFFFFF",
      "80000606:111111111111 80000806:222222222222 80000A02:86DD 80001001:0C "
      "80001201:03 00013A01:66 80001401:11 "
      "80003410:77777777777777777777777777777777 "
      "80003610:88888888888888888888888888888888 80003804:00044444 "
      "80001E02:BBBB 80002002:CCCC 80004E02:0001 FFFF080600FFFFFF003E");
}

TEST(matchpacket, udpv6) {
  testPacket(
      "11111111111122222222222286DD "
      "633444445555116677777777777777777777777777777777888888888888888888888888"
      "88888888 BBBBCCCCDDDDEEEE",
      "80000606:111111111111 80000806:222222222222 80000A02:86DD 80001001:0C "
      "80001201:03 00013A01:66 80001401:11 "
      "80003410:77777777777777777777777777777777 "
      "80003610:88888888888888888888888888888888 80003804:00044444 "
      "80001E02:BBBB 80002002:CCCC 80004E02:0001");
}

TEST(matchpacket, lldp) {
  testPacket(
      "0180C200000E00000000000188CC0207040000000000010403072D32060200780A1A4F46"
      "7C30303A30303A30303A30303A30303A30303A30303A3031FE240026E1004F467C2D3240"
      "4F467C30303A30303A30303A30303A30303A30303A30303A30310000",
      "800006060180C200000E8000080600000000000180000A0288CCFFFF024400FFFFFF0704"
      "000000000001000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000FFFF044400FFFFFF0307"
      "2D3200000000000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000FFFF060600FFFFFF007"
      "8");

  // malformed lldp tlv
  testPacket(
      "0180C200000EB2D434D89B0388CC0209010000000000000002040502000000020603000"
      "1",
      "800006060180C200000E80000806B2D434D89B0380000A0288CCFFFF024400FFFFFF0901"
      "000000000000000200000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000FFFF044400FFFFFF0502"
      "000000020000000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000 "
      "FFFF0806:00FFFFFF0020");

  // no end tlv
  testPacket(
      "0180C200000E00000000000188CC0207040000000000010403072D32060200780A1A4F46"
      "7C30303A30303A30303A30303A30303A30303A30303A3031FE240026E1004F467C2D3240"
      "4F467C30303A30303A30303A30303A30303A30303A30303A3031",
      "800006060180C200000E8000080600000000000180000A0288CCFFFF024400FFFFFF0704"
      "000000000001000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000FFFF044400FFFFFF0307"
      "2D3200000000000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000FFFF060600FFFFFF007"
      "8");
}

TEST(matchpacket, ethernet_misaligned) {
  ByteList buf{HexToRawData("FFFFFFFFFFFF0000000000010806")};
  ASSERT_TRUE(IsPtrAligned(buf.data(), 8));

  MatchPacket match{ByteRange{buf.data(), buf.size()}};
  EXPECT_HEX("80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806",
             match.data(), match.size());
}

TEST(matchpacket, vlan_tag) {
  testPacket(
      "FFFFFFFFFFFF422B0B87AE5B810003E808060001080006040001422B0B87AE5B0A000001"
      "0000000000000A000002",
      "80000606:FFFFFFFFFFFF 80000806:422B0B87AE5B 80000C02:13E8 80000E01:00 "
      "80000A02:0806 80002A02:0001 80002C04:0A000001 80002E04:0A000002 "
      "80003006:422B0B87AE5B 80003206:000000000000");
}

TEST(matchpacket, icmpv6_nd_solicit) {
  testPacket(
      "3333FF100001BED925CBD7F0810007F886DD6000000000203AFFFC000000000000000000"
      "000000000001FF0200000000000000000001FF1000018700C4C400000000FC0000000000"
      "000000100010001000010101BED925CBD7F0",
      "80000606:3333FF100001 80000806:BED925CBD7F0 80000C02:17F8 80000E01:00 "
      "80000A02:86DD 00013A01:FF 80001401:3A "
      "80003410:FC000000000000000000000000000001 "
      "80003610:FF0200000000000000000001FF100001 80003A01:87 "
      "80003C01:00 80003E10:FC000000000000000010001000100001 "
      "80004006:BED925CBD7F0 80004E02:0001");
}

TEST(matchpacket, icmpv6_nd_advertise) {
  testPacket(
      "3333FF100001BED925CBD7F0810007F886DD6000000000203AFFFC000000000000000000"
      "000000000001FF0200000000000000000001FF1000018800C4C470000000FC0000000000"
      "000000100010001000010201BED925CBD7F0",
      "800006063333FF10000180000806BED925CBD7F080000C0217F880000E010080000A0286DD00013A01FF800014013A80003410FC00000000000000000000000000000180003610FF0200000000000000000001FF10000180003A018880003C0100FFFF0A0800FFFFFF7000000080003E10FC00000000000000001000100010000180004206BED925CBD7F080004E020001");
}

TEST(matchpacket, icmpv6_nd_router_advert) {
  testPacket(
      "3333FF1000012E296EEED14486DD6000000000083AFFFC00000000000000000000000000"
      "0001FF0200000000000000000001FF10000185007C9F01020304",
      "800006063333FF100001800008062E296EEED14480000A0286DD00013A01FF800014013A80003410FC00000000000000000000000000000180003610FF0200000000000000000001FF10000180003A018580003C010080004E020001FFFF080600FFFFFF003A");
}

TEST(matchpacket, icmpv4_echo_first_fragment) {
  testPacket(
      "0E00000000010AC2BB024296810000640800450005DC0518200040013AA70A0000010A64"
      "00FE080014572C2400059DA8FC590000000046D506000000000010111213141516171819"
      "1A1B1C1D1E1F20",
      "80000606:0E0000000001 80000806:0AC2BB024296 80000C02:1064 80000E01:00 "
      "80000A02:0800 80001401:01 80001604:0A000001 "
      "80001804:0A6400FE 00013401:01 00013A01:40 80002601:08 80002801:00 "
      "FFFF0806:00FFFFFF002A");
}

TEST(matchpacket, icmpv4_echo_second_fragment) {
  testPacket(
      "0E00000000010AC2BB02429681000064080045000018051800B940015FB20A0000010A64"
      "00FEC0C1C2C3",
      "80000606:0E0000000001 80000806:0AC2BB024296 80000C02:1064 80000E01:00 "
      "80000A02:0800 80001401:01 80001604:0A000001 "
      "80001804:0A6400FE 00013401:03 00013A01:40 FFFF0806:00FFFFFF0026");
}
