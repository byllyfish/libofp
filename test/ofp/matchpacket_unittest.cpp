// Copyright (c) 2015-2016 William W. Fisher (at gmail dot com)
// This file is distributed under the MIT License.

#include "ofp/matchpacket.h"
#include "ofp/unittest.h"

using namespace ofp;

static void testPacket(const char *hex, const char *outHex) {
  ByteList buf{HexToRawData(hex)};

  // Insert two zero bytes at the beginning. MatchPacket expects packet data
  // to be aligned at 2 bytes past the 8-byte alignment.
  buf.insertZeros(buf.begin(), 2);

  ASSERT_TRUE(IsPtrAligned(buf.data(), 8));

  MatchPacket match{ByteRange{buf.data() + 2, buf.size() - 2}};
  EXPECT_HEX(outHex, match.data(), match.size());
}

TEST(matchpacket, ethernet) {
  testPacket("FFFFFFFFFFFF0000000000010806",
             "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806");

  // Unknown type
  testPacket("FFFFFFFFFFFF0000000000010807",
             "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0807");

  // 1 byte short
  testPacket("FFFFFFFFFFFF00000000000108", "FFFF0806:00FFFFFF0000");

  // 1 byte long
  testPacket("FFFFFFFFFFFF000000000001080601",
             "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806 "
             "FFFF0806:00FFFFFF000E");
}

TEST(matchpacket, arp) {
  testPacket(
      "FFFFFFFFFFFF000000000001080600010800060400010000000000010A00000100000000"
      "00000A000002",
      "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806 80002A02:0001 "
      "80002C04:0A000001 80002E04:0A000002 80003006:000000000001 "
      "80003206:000000000000");

  // 1 byte short
  testPacket(
      "FFFFFFFFFFFF000000000001080600010800060400010000000000010A00000100000000"
      "00000A0000",
      "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806 "
      "FFFF0806:00FFFFFF000E");

  // 1 byte long
  testPacket(
      "FFFFFFFFFFFF000000000001080600010800060400010000000000010A00000100000000"
      "00000A00000201",
      "80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806 80002A02:0001 "
      "80002C04:0A000001 80002E04:0A000002 80003006:000000000001 "
      "80003206:000000000000 FFFF0806:00FFFFFF002A");
}

TEST(matchpacket, tcpv4) {
  // exact size
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007706888899999999AAAAAAAA "
      "BBBBCCCCDDDDDDDDDDDDDDDDEEEEFFFFFFFFFFFF",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:06 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "80001A02:BBBB 80001C02:CCCC 00014402:0EEE");

  // 1 byte long (todo: check ipv4 len?)
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007706888899999999AAAAAAAA "
      "BBBBCCCCDDDDDDDDDDDDDDDDEEEEFFFFFFFFFFFF 01",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:06 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "80001A02:BBBB 80001C02:CCCC 00014402:0EEE FFFF0806:00FFFFFF0036");

  // 1 byte short
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007706888899999999AAAAAAAA "
      "BBBBCCCCDDDDDDDDDDDDDDDDEEEEFFFFFFFFFF",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:06 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "FFFF0806:00FFFFFF0022");
}

TEST(matchpacket, udpv4) {
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007711888899999999AAAAAAAA BBBBCCCCDDDDEEEE",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:11 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "80001E02:BBBB 80002002:CCCC");
}

TEST(matchpacket, icmpv4) {
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007701888899999999AAAAAAAA BBCCDDDDDDDD",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:01 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "80002601:BB 80002801:CC FFFF0806:00FFFFFF0026");

  // exact size
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007701888899999999AAAAAAAA BBCCDDDD",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:01 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "80002601:BB 80002801:CC");

  // 1 byte short
  testPacket(
      "1111111111112222222222220800 "
      "45334444555500007701888899999999AAAAAAAA BBCCDD",
      "80000606:111111111111 80000806:222222222222 80000A02:0800 80001001:0C "
      "80001201:03 80001401:01 80001604:99999999 80001804:AAAAAAAA 00013A01:77 "
      "FFFF0806:00FFFFFF0022");
}

TEST(matchpacket, icmpv6) {
  testPacket(
      "3333FF718C4C32FA25D4234186DD6000000000183AFF0000000000000000000000000000"
      "0000FF0200000000000000000001FF718C4C87009A9E00000000FE80000000000000FC0C"
      "CDFFFE718C4C",
      "80000606:3333FF718C4C 80000806:32FA25D42341 80000A02:86DD 80001001:00 "
      "80001201:00 80001401:3A 80003410:00000000000000000000000000000000 "
      "80003610:FF0200000000000000000001FF718C4C 80003804:00000000 80003A01:87 "
      "80003C01:00 80004E02:0001 FFFF0806:00FFFFFF003A");

  // exact size
  testPacket(
      "3333FF718C4C32FA25D4234186DD6000000000183AFF0000000000000000000000000000"
      "0000FF0200000000000000000001FF718C4C87009A9E",
      "80000606:3333FF718C4C 80000806:32FA25D42341 80000A02:86DD 80001001:00 "
      "80001201:00 80001401:3A 80003410:00000000000000000000000000000000 "
      "80003610:FF0200000000000000000001FF718C4C 80003804:00000000 80003A01:87 "
      "80003C01:00 80004E02:0001");

  // 1 byte short
  testPacket(
      "3333FF718C4C32FA25D4234186DD6000000000183AFF0000000000000000000000000000"
      "0000FF0200000000000000000001FF718C4C87009A",
      "80000606:3333FF718C4C 80000806:32FA25D42341 80000A02:86DD 80001001:00 "
      "80001201:00 80001401:3A 80003410:00000000000000000000000000000000 "
      "80003610:FF0200000000000000000001FF718C4C 80003804:00000000 "
      "80004E02:0001 FFFF0806:00FFFFFF0036");
}

TEST(matchpacket, tcpv6) {
  testPacket(
      "11111111111122222222222286DD "
      "633444445555116677777777777777777777777777777777888888888888888888888888"
      "88888888 BBBBCCCCDDDDDDDDDDDDDDDDEEEEFFFFFFFFFFFF",
      "80000606:111111111111 80000806:222222222222 80000A02:86DD 80001001:0C "
      "80001201:03 80001401:11 80003410:77777777777777777777777777777777 "
      "80003610:88888888888888888888888888888888 80003804:00044444 "
      "80001E02:BBBB 80002002:CCCC 80004E02:0001 FFFF080600FFFFFF003E");
}

TEST(matchpacket, udpv6) {
  testPacket(
      "11111111111122222222222286DD "
      "633444445555116677777777777777777777777777777777888888888888888888888888"
      "88888888 BBBBCCCCDDDDEEEE",
      "80000606:111111111111 80000806:222222222222 80000A02:86DD 80001001:0C "
      "80001201:03 80001401:11 80003410:77777777777777777777777777777777 "
      "80003610:88888888888888888888888888888888 80003804:00044444 "
      "80001E02:BBBB 80002002:CCCC 80004E02:0001");
}

TEST(matchpacket, lldp) {
  testPacket(
      "0180C200000E00000000000188CC0207040000000000010403072D32060200780A1A4F46"
      "7C30303A30303A30303A30303A30303A30303A30303A3031FE240026E1004F467C2D3240"
      "4F467C30303A30303A30303A30303A30303A30303A30303A30310000",
      "800006060180C200000E8000080600000000000180000A0288CCFFFF024400FFFFFF0704"
      "000000000001000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000FFFF044400FFFFFF0307"
      "2D3200000000000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000FFFF060600FFFFFF007"
      "8");

  // malformed lldp tlv
  testPacket(
      "0180C200000EB2D434D89B0388CC0209010000000000000002040502000000020603000"
      "1",
      "800006060180C200000E80000806B2D434D89B0380000A0288CCFFFF024400FFFFFF0901"
      "000000000000000200000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000FFFF044400FFFFFF0502"
      "000000020000000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000 "
      "FFFF0806:00FFFFFF0020");

  // no end tlv
  testPacket(
      "0180C200000E00000000000188CC0207040000000000010403072D32060200780A1A4F46"
      "7C30303A30303A30303A30303A30303A30303A30303A3031FE240026E1004F467C2D3240"
      "4F467C30303A30303A30303A30303A30303A30303A30303A3031",
      "800006060180C200000E8000080600000000000180000A0288CCFFFF024400FFFFFF0704"
      "000000000001000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000FFFF044400FFFFFF0307"
      "2D3200000000000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000FFFF060600FFFFFF007"
      "8");
}

TEST(matchpacket, ethernet_misaligned) {
  ByteList buf{HexToRawData("FFFFFFFFFFFF0000000000010806")};
  ASSERT_TRUE(IsPtrAligned(buf.data(), 8));

  MatchPacket match{ByteRange{buf.data(), buf.size()}};
  EXPECT_HEX("80000606:FFFFFFFFFFFF 80000806:000000000001 80000A02:0806",
             match.data(), match.size());
}

TEST(matchpacket, vlan_tag) {
  testPacket("FFFFFFFFFFFF422B0B87AE5B810003E808060001080006040001422B0B87AE5B0A0000010000000000000A000002", "80000606:FFFFFFFFFFFF 80000806:422B0B87AE5B 80000C02:13E8 80000E01:00 80000A02:0806 80002A02:0001 80002C04:0A000001 80002E04:0A000002 80003006:422B0B87AE5B 80003206:000000000000");
}
