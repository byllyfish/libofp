// Copyright 2015-present Bill Fisher. All rights reserved.

#include <numeric>
#include "ofp/unittest.h"
#include "ofp/lldpvalue.h"

using namespace ofp;

TEST(lldpvalue, constructor) {
  LLDPValue<LLDPType::ChassisID> value1;
  EXPECT_HEX(
      "000000000000000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value1, sizeof(value1));
  EXPECT_EQ(0, value1.size());
  EXPECT_EQ(value1.maxSize(), sizeof(value1) - 1);

  LLDPValue<LLDPType::ChassisID> value2{{"abcde", 5}};
  EXPECT_HEX(
      "056162636465000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value2, sizeof(value2));
  EXPECT_EQ(5, value2.size());

  UInt8 buf[LLDPValue<LLDPType::ChassisID>::maxSize() + 32];
  std::iota(buf, buf + sizeof(buf), 0);

  LLDPValue<LLDPType::ChassisID> value3{{buf, sizeof(buf)}};
  EXPECT_HEX(
      "3F000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122"
      "232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E",
      &value3, sizeof(value3));
  EXPECT_EQ(63, value3.size());
  EXPECT_EQ(LLDPValue<LLDPType::ChassisID>::maxSize(), value3.size());
}



TEST(lldpvalue, chassisID) {
  LLDPValue<LLDPType::ChassisID> value;

  EXPECT_TRUE(value.parse("001122334455"));
  EXPECT_HEX("06001122334455000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", &value, sizeof(value));
  EXPECT_EQ("raw 001122334455", value.toString());

  EXPECT_TRUE(value.parse("raw 001122334455"));
  EXPECT_HEX("06001122334455000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", &value, sizeof(value));
  EXPECT_EQ("raw 001122334455", value.toString());

  EXPECT_TRUE(value.parse("chassis 001122334455"));
  EXPECT_HEX("07010011223344550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", &value, sizeof(value));
  EXPECT_EQ("chassis 001122334455", value.toString());

  EXPECT_TRUE(value.parse("port 001122334455"));
  EXPECT_HEX("07030011223344550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", &value, sizeof(value));
  EXPECT_EQ("port 001122334455", value.toString());

  EXPECT_TRUE(value.parse("ifalias 001122334455"));
  EXPECT_HEX("07020011223344550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", &value, sizeof(value));
  EXPECT_EQ("ifalias 001122334455", value.toString());

  EXPECT_TRUE(value.parse("ifname 001122334455"));
  EXPECT_HEX("07060011223344550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", &value, sizeof(value));
  EXPECT_EQ("ifname 001122334455", value.toString());

  EXPECT_TRUE(value.parse("mac 001122334455"));
  EXPECT_HEX("07040011223344550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", &value, sizeof(value));
  EXPECT_EQ("mac 001122334455", value.toString());

  EXPECT_TRUE(value.parse("ip 127.0.0.1"));
  EXPECT_HEX("0605017F000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", &value, sizeof(value));
  EXPECT_EQ("ip 127.0.0.1", value.toString());

  EXPECT_TRUE(value.parse("ip6 fe80::11:22:33"));
  EXPECT_HEX("120502FE800000000000000000001100220033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", &value, sizeof(value));
  EXPECT_EQ("ip6 fe80::11:22:33", value.toString());
}
