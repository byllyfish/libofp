'\" t
.\"     Title: libofp-jsonrpc
.\"    Author: William W. Fisher <william.w.fisher@gmail.com>
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 01/15/2016
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LIBOFP\-JSONRPC" "1" "01/15/2016" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
libofp-jsonrpc \- OpenFlow Microservice
.SH "SYNOPSIS"
.sp
\fBlibofp jsonrpc\fR [\fIOPTIONS\fR]
.SH "DESCRIPTION"
.sp
The \fBlibofp jsonrpc\fR tool runs a JSON\-RPC service that enables programmatic control of the OpenFlow protocol using JSON messages\&.
.sp
This program implements JSON\-RPC 2\&.0 using a YAML 1\&.2 parser\&. Your JSON parser must support 64 bit integers, or you will run into trouble handling large counters and id\(cqs\&.
.sp
This implementation ignores the "jsonrpc" property defined in the JSON\-RPC 2\&.0 specification\&.
.SH "OPTIONS"
.PP
\fB\-\-xpc\fR
.RS 4
Run as an XPC service on Mac OS X\&.
.RE
.SH "RPC OVERVIEW"
.sp
The json\-rpc server uses JSON\-RPC protocol with some minor adjustments\&.
.sp
Request ID\(cqs must be non\-negative integers less than or equal to 2^63\-2\&.
.sp
There are seven JSON\-RPC requests:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OFP\&.LISTEN
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OFP\&.CONNECT
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OFP\&.SEND
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OFP\&.CLOSE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OFP\&.STATUS
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OFP\&.LIST_CONNECTIONS
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OFP\&.ADD_IDENTITY
.RE
.sp
There are three JSON\-RPC notifications:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OFP\&.CHANNEL
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OFP\&.MESSAGE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OFP\&.ALERT
.RE
.sp
If you omit the \fIid\fR property from a request, no reply will be sent\&.
.SH "RPC COMMANDS"
.SS "OFP\&.CONNECT"
.sp
Open an outgoing OpenFlow connection to the specified host and port\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRequest\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
method: OFP\&.CONNECT
params:
  endpoint: IPv6Endpoint
  versions: !opt [UInt8]
  tls_id:  !opt UInt64
  options: !opt [String]
.fi
.if n \{\
.RE
.\}
.PP
\fBid\fR
.RS 4
Request ID used to identify the reply (unsigned 64\-bit integer)\&.
.RE
.PP
\fBmethod\fR
.RS 4
Must be "OFP\&.CONNECT"\&.
.RE
.PP
\fBendpoint\fR
.RS 4
Destination to connect to\&. Must be a string that specifies an IPv4/IPv6 address and a TCP port number separated by a
\fI:\fR
or
\fI\&.\fR\&. Formats include: "127\&.0\&.0\&.1:6653", "127\&.0\&.0\&.1\&.6653", "[::1]:6653", "::1\&.6653"\&.
.RE
.PP
\fBversions\fR
.RS 4
List of OpenFlow versions to support\&. Defaults to all\&.
.RE
.PP
\fBtls_id\fR
.RS 4
Identifier for TLS/DTLS identity to use\&. See ofp\&.add_identity\&.
.RE
.PP
\fBoptions\fR
.RS 4
List of additional options that control the connection\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-raw\fR
= Raw mode; do not automatically send a features_request to determine the datapath_id\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-udp\fR
= Use UDP instead of TCP\&. This option must be combined with \-\-raw\&.
.RE
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBReply\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
result:
    conn_id: UInt64
.fi
.if n \{\
.RE
.\}
.PP
\fBconn_id\fR
.RS 4
Connection ID associated with the new connection\&.
.RE
.RE
.SS "OFP\&.LISTEN"
.sp
Listen for incoming OpenFlow connections on the specified interface and port\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRequest\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
method: OFP\&.LISTEN
params:
  endpoint: IPv6Endpoint
  versions: [UInt8]
  tls_id: UInt64
  options: [String]
.fi
.if n \{\
.RE
.\}
.PP
\fBendpoint\fR
.RS 4
Local IP address and port number to listen on, e\&.g\&. "127\&.0\&.0\&.1:8000"\&. If the IP address is omitted, listen on all interface addresses\&. The IP address and port number must be separated by a space or colon when both are present\&. When using a colon separator, use brackets around an IPv6 address\&.
.RE
.PP
\fBversions\fR
.RS 4
List of OpenFlow versions to support\&. Defaults to all\&.
.RE
.PP
\fBtls_id\fR
.RS 4
TLS identity to use for securing the connection\&. The default identity is 0 (normally plaintext)\&.
.RE
.PP
\fBoptions\fR
.RS 4
List of boolean flags\&. The default is empty\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBraw\fR
= Raw TCP mode; don\(cqt negotiate as a controller\&. Use this option to imitate an OpenFlow switch that listens for controller connections\&.
.RE
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBReply\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
result:
    conn_id: UInt64
.fi
.if n \{\
.RE
.\}
.PP
\fBconn_id\fR
.RS 4
Unique, non\-zero identifier representing the listening connection\&.
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDiscussion\fR
.RS 4
.sp
By default, this command listens for incoming connections from OpenFlow switches\&. When a switch connects, we negotiate an OpenFlow connection and send a OpenFlow FeaturesRequest\&. The response to the FeaturesRequest is passed as the first ofp\&.message event\&.
.sp
When a TCP auxiliary connection arrives from a switch, the FeaturesReply is not passed as a ofp\&.message\&.
.sp
This command will also listen for UDP auxiliary connections from switches\&.
.sp
If a non\-zero tls_id is passed as an argument, we will use the specified TLS settings (see ofp\&.tls\&.add_identity) for TLS and DTLS\&.
.sp
There is one raw option for listen, raw_tcp\&. This option will listen for incoming connections on the specified TCP endpoint only (no UDP), negotiate an OpenFlow connection, but leave the rest of the connection alone\&.
.RE
.SS "OFP\&.SEND"
.sp
Send the specified OpenFlow message\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRequest\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
method: OFP\&.SEND
params: Message
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBReply\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
TODO
.fi
.if n \{\
.RE
.\}
.RE
.SS "OFP\&.CLOSE"
.sp
Close the specified connection\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRequest\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
method: OFP\&.CLOSE
params:
  conn_id: UInt64
.fi
.if n \{\
.RE
.\}
.PP
\fBconn_id\fR
.RS 4
Specify the connection to close\&. Use 0 to close all connections\&.
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBReply\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
result:
  count: UInt64
.fi
.if n \{\
.RE
.\}
.PP
\fBcount\fR
.RS 4
Number of connections closed\&.
.RE
.RE
.SS "OFP\&.LIST_CONNECTIONS"
.sp
List all connections\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRequest\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
method: OFP\&.LIST_CONNECTIONS
params:
  conn_id: UInt64
.fi
.if n \{\
.RE
.\}
.PP
\fBconn_id\fR
.RS 4
Specify a connection to obtain info for\&. Use 0 to list all connections\&.
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBReply\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
result: [{ConnectionInfo}\&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
{ConnectionInfo} ::=
  local_endpoint: IPv6Endpoint
  remote_endpoint: IPv6Endpoint
  datapath_id: DatapathID
  conn_id: UInt64
  auxiliary_id: UInt8
  transport: \*(AqTCP\*(Aq | \*(AqUDP\*(Aq | \*(AqTLS\*(Aq | \*(AqDTLS\*(Aq | \*(AqNONE\*(Aq
.fi
.if n \{\
.RE
.\}
.RE
.SS "OFP\&.ADD_IDENTITY"
.sp
Configure an identity for use in securing incoming or outgoing connections using Transport Layer Security (TLS)\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRequest\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
method: OFP\&.ADD_IDENTITY
params:
  certificate: String
  verifier: String
  password: String                      # Optional; Default = ""
.fi
.if n \{\
.RE
.\}
.PP
\fBcertificate\fR
.RS 4
PEM certificate chain data with PEM private key appended\&. The PEM private key may be encrypted with a password\&.
.RE
.PP
\fBverifier\fR
.RS 4
Trusted PEM root certificate data\&.
.RE
.PP
\fBpassword\fR
.RS 4
Password for PEM private key, if needed\&.
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBReply\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
id: UInt64
result:
  tls_id: UInt64
.fi
.if n \{\
.RE
.\}
.PP
\fBtls_id\fR
.RS 4
Unique, non\-zero identifier representing the TLS identity\&.
.RE
.RE
.SH "RPC NOTIFICATIONS"
.SS "OFP\&.CHANNEL"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRequest\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
method: OFP\&.CHANNEL
params:
  conn_id: UInt64
  datapath_id: DatapathID
  status: \*(AqUP\*(Aq | \*(AqDOWN\*(Aq
  version: UInt8
.fi
.if n \{\
.RE
.\}
.RE
.SS "OFP\&.MESSAGE"
.sp
.if n \{\
.RS 4
.\}
.nf
method: OFP\&.MESSAGE
params: {Message}
.fi
.if n \{\
.RE
.\}
.SS "ofp\&.message_error"
.sp
.if n \{\
.RS 4
.\}
.nf
method: \*(Aqofp\&.message_error\*(Aq
params:
  datapath_id: DatapathID
  error: String
  data: HexString
.fi
.if n \{\
.RE
.\}
.SH "TRANSPORT PROTOCOL"
.sp
JSON\-RPC messages are sent over a connection using a UTF\-8 text protocol\&. Each JSON message is separated by a newline\&. The maximum length of a line is 1 MB\&.
.sp
.if n \{\
.RS 4
.\}
.nf
{ "id": 1, "method": "ofp\&.description" }
.fi
.if n \{\
.RE
.\}
.sp
All responses are encoded in compact, single\-line JSON representation\&.
.sp
.if n \{\
.RS 4
.\}
.nf
{"id":1,"result":{"major_version":0,"minor_version":1, \&.\&.\&. }}
.fi
.if n \{\
.RE
.\}
.sp
JSON input can also use YAML encoding, which is less stringent\&. Still, no newlines are allowed\&.
.sp
.if n \{\
.RS 4
.\}
.nf
{ id: 1, method: ofp\&.description }
.fi
.if n \{\
.RE
.\}
.sp
A message encoded inside a JSON string is parsed using YAML\&. Escape newlines with "\en"\&.
.sp
.if n \{\
.RS 4
.\}
.nf
"id: 1\enmethod: ofp\&.description"
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
\fIlibofp\fR(1), \fIlibofp\-schema\fR(1)
.SH "EXIT STATUS"
.PP
\fB0\fR
.RS 4
Success
.RE
.PP
\fB1\fR
.RS 4
Failure: Syntax or usage error in command line arguments\&.
.RE
.SH "RESOURCES"
.sp
GitHub: https://github\&.com/byllyfish/libofp
.SH "COPYING"
.sp
Copyright (C) 2015\-2016 William W\&. Fisher\&. Free use of this software is granted under the terms of the MIT Licence\&.
.SH "AUTHOR"
.PP
\fBWilliam W\&. Fisher\fR <\&william\&.w\&.fisher@gmail\&.com\&>
.RS 4
Author.
.RE
