'\" t
.\"     Title: oftr
.\"    Author: William W. Fisher <william.w.fisher@gmail.com>
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 10/15/2017
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "OFTR" "1" "10/15/2017" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
oftr \- YAML/JSON interface to the OpenFlow Protocol 1\&.0 \- 1\&.4
.SH "SYNOPSIS"
.sp
\fBoftr encode\fR [\fIOPTIONS\fR] [\fIINPUT_FILES\fR, \&...]
.sp
\fBoftr decode\fR [\fIOPTIONS\fR] [\fIINPUT_FILES\fR, \&...]
.sp
\fBoftr jsonrpc\fR [\fIOPTIONS\fR]
.sp
\fBoftr help\fR [\fIOPTIONS\fR] [\fIARGS\fR, \&...]
.sp
\fBoftr [\-\-version|\-\-help]\fR
.SH "DESCRIPTION"
.sp
The \fBoftr\fR program translates binary OpenFlow messages to YAML\&. It also translates YAML messages to OpenFlow\&. This program expects that all YAML input is UTF\-8\&.
.sp
If you translate an OpenFlow message to YAML, then back to binary, you will obtain the original sequence of bytes (modulo differences in property ordering)\&.
.sp
The YAML schema is based on OpenFlow 1\&.4\&.x\&. If your YAML message specifies an earlier OpenFlow version that does not support all message attributes, the current implementation ignores those attributes when constructing the binary OpenFlow message\&.
.sp
The oftr program includes a JSON\-RPC microservice that supports multiple OpenFlow connections\&. See the oftr\-jsonrpc man page for more details\&.
.sp
The YAML schema used for OpenFlow messages is embedded in the tool itself\&. You can browse the schema using the oftr help command\&. See the oftr\-schema man page for more details about the conventions used\&.
.SH "EXAMPLES"
.sp
To translate a text file into binary OpenFlow messages:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr encode \-o output\&.bin input\&.yml
.fi
.if n \{\
.RE
.\}
.sp
To translate a text file into binary OpenFlow messages, while ignoring sets of match fields with missing prerequisites:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr encode \-\-unchecked\-match \-o output\&.bin input\&.yml
.fi
.if n \{\
.RE
.\}
.sp
To translate a text file of compact, single line JSON objects separated by linefeeds:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr encode \-\-json input\&.json
.fi
.if n \{\
.RE
.\}
.sp
To decode a file of binary OpenFlow messages to YAML:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr decode input\&.bin
.fi
.if n \{\
.RE
.\}
.sp
To decode the OpenFlow messages in a "\&.pcap" file:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr decode "filename\&.pcap"
.fi
.if n \{\
.RE
.\}
.sp
To decode a file of binary OpenFlow messages to compact single\-line JSON objects:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr decode \-\-json "filename"
.fi
.if n \{\
.RE
.\}
.sp
To decode binary OpenFlow messages to a valid JSON array of objects:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr decode \-\-json\-array "filename"
.fi
.if n \{\
.RE
.\}
.sp
To decode binary OpenFlow messages with the additional check that the resulting YAML produces the same binary message when re\-encoded:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr decode \-\-verify\-output "filename"
.fi
.if n \{\
.RE
.\}
.sp
You can use netcat in a UNIX pipe to feed OpenFlow messages to a switch or controller:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr encode input\&.yml | nc \-w 3 10\&.0\&.0\&.1 6653 | oftr decode
.fi
.if n \{\
.RE
.\}
.sp
The oftr help tool provides information about the schema used for reading/writing OpenFlow messages in YAML\&. To obtain information about the syntax for the \fIFLOW_MOD\fR message:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr help flow_mod
.fi
.if n \{\
.RE
.\}
.sp
To list all supported OXM fields:
.sp
.if n \{\
.RS 4
.\}
.nf
oftr help \-\-fields
.fi
.if n \{\
.RE
.\}
.SH "OFTR ENCODE"
.sp
\fBoftr encode\fR [\fIOPTIONS\fR] [\fIINPUT_FILES\fR, \&...]
.sp
Encode OpenFlow messages to binary as specified by YAML input files\&. If there is a syntax error in the YAML input, stop and report an error\&.
.sp
If no input files are specified, use standard input (stdin)\&. A single hyphen also represents stdin\&.
.sp
Each binary OpenFlow message will use the version specified by the textual object\&. It is an error if no version is specified\&. You can specify a default OpenFlow version using the \-\-ofversion option\&.
.SS "OPTIONS"
.PP
\fB\-h, \-\-help\fR
.RS 4
Print out usage information for the command\&.
.RE
.PP
\fB\-x, \-\-hex\fR
.RS 4
Output hexadecimal format rather than binary\&.
.RE
.PP
\fB\-j, \-\-json\fR
.RS 4
Json input is separated by linefeeds\&.
.RE
.PP
\fB\-\-json\-array\fR
.RS 4
Json input is arbitrarily delimited objects\&.
.RE
.PP
\fB\-k, \-\-keep\-going\fR
.RS 4
Continue processing input after errors\&.
.RE
.PP
\fB\-\-ofversion\fR=\fIVERSION\fR
.RS 4
Specify OpenFlow version to use when it is unspecified by the input\&. The version is the
\fIwire\fR
version, i\&.e\&. use 1 for 1\&.0, 4 for 1\&.3, 5 for 1\&.4, etc\&.
.RE
.PP
\fB\-o, \-\-output\fR=\fIFILE\fR
.RS 4
Write output to specified file instead of stdout\&.
.RE
.PP
\fB\-R, \-\-roundtrip\fR
.RS 4
After translating the input to a binary message, translate it back to YAML\&. If \-j is specified, translate it back to JSON\&. This option is used to translate the YAML input into "canonical" form\&.
.RE
.PP
\fB\-s, \-\-silent\fR
.RS 4
Quiet mode; suppress normal output\&.
.RE
.PP
\fB\-\-silent\-error\fR
.RS 4
Suppress error output for invalid messages\&.
.RE
.PP
\fB\-M, \-\-unchecked\-match\fR
.RS 4
Do not check items in match fields\&.
.RE
.SH "OFTR DECODE"
.sp
\fBoftr decode\fR [\fIOPTIONS\fR] [\fIINPUT_FILES\fR, \&...]
.sp
Decode binary OpenFlow messages in the input files and translate each message to human\-readable YAML output\&. If there is an invalid message, stop and report an error\&.
.sp
If no input files are specified, use standard input (stdin)\&. A single hyphen also represents stdin\&.
.SS "OPTIONS"
.PP
\fB\-h, \-\-help\fR
.RS 4
Print out usage information for the command\&.
.RE
.PP
\fB\-v, \-\-invert\-check\fR
.RS 4
Expect invalid messages only\&. This option is used for internal testing\&.
.RE
.PP
\fB\-j, \-\-json\fR
.RS 4
Write compact JSON output instead of YAML\&.
.RE
.PP
\fB\-\-json\-array\fR
.RS 4
Write output as a valid JSON array\&.
.RE
.PP
\fB\-\-json\-flavor\fR=\fIFLAVOR\fR
.RS 4
Specifies the flavor of JSON output\&. The default is
\fIdefault\fR\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBdefault\fR
= Regular JSON output\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBmongodb\fR
= MongoDB JSON with binary data\&.
.RE
.RE
.PP
\fB\-k, \-\-keep\-going\fR
.RS 4
Continue processing messages after errors\&.
.RE
.PP
\fB\-o, \-\-output\fR=\fIFILE\fR
.RS 4
Write output to specified file instead of stdout\&.
.RE
.PP
\fB\-s, \-\-silent\fR
.RS 4
Quiet mode; suppress normal output\&.
.RE
.PP
\fB\-\-silent\-error\fR
.RS 4
Suppress error output for invalid messages\&.
.RE
.PP
\fB\-V, \-verify\-output\fR
.RS 4
Verify output by translating it back to binary\&.
.RE
.PP
\fB\-\-show\-filename\fR
.RS 4
Show the file name in all decodes\&.
.RE
.PP
\fB\-\-msg\-include\fR=\fITYPES\fR
.RS 4
Output these OpenFlow message types\&. Argument is a comma separated list of patterns\&. A pattern is a
\fIglob\fR
for the message type (e\&.g\&.
\fIFLOW_MOD\fR,
\fIREQUEST\&.*\fR)\&. If a pattern begins with "src:" or "dst:", it matches a source or destination port number\&. If a pattern begins with "conn_id:", it matches against the conn_id value\&. Any pattern prefixed by
\fI!\fR
is negated\&.
.RE
.PP
\fB\-\-msg\-exclude\fR=\fITYPES\fR
.RS 4
Don\(cqt output these OpenFlow message types\&. Argument is a comma separated list of patterns as described under the \-\-msg\-include option\&.
.RE
.PP
\fB\-\-pkt\-decode\fR
.RS 4
Include _pkt in PacketIn/PacketOut decodes\&.
.RE
.PP
\fB\-\-pkt\-write\-file\fR=\fIFILE\fR
.RS 4
Write data from PacketIn/PacketOut messages to \&.pcap file\&.
.RE
.sp
\fB\-\-timestamp\fR=\fIFORMAT\fR Specifies the timestamp output format\&. \- \fBnone\fR = No timestamp \- \fBsecs\fR = Seconds since January 1, 1970 UTC (nanosecond precision)
.SS "Packet Capture Options"
.PP
\fB\-\-pcap\-device\fR=\fIDEVICE\fR
.RS 4
Specify interface where packets should be captured\&.
.RE
.PP
\fB\-\-pcap\-filter\fR=\fIFILTER\fR
.RS 4
Specify the packet capture filter\&. The default filter is \(oqtcp port 6653 or 6633\&. To capture all packets specify \*(Aq\(cq\&. A non\-empty filter is augmented to ignore exactly one vlan tag\&. The actual filter passed to libpcap is `FILTER or (vlan and FILTER)\&.
.RE
.PP
\fB\-\-pcap\-format\fR=\fIauto|yes|no\fR
.RS 4
Specify whether to treat all input files as pcap format\&.
yes
causes the decoder to open all files using libpcap\&.
no
causes the decoder to always treat the file as binary\&. The default
auto
sets the \-\-pcap\-format to yes if there is at least one file with a pcap file extension, or the first file is pcap file\&. It is an error if we fail to open a pcap file\&.
.RE
.PP
\fB\-\-pcap\-max\-missing\-bytes\fR=SIZE
.RS 4
Add missing zero bytes to partial streams (for debugging)\&.
.RE
.PP
\fB\-\-pcap\-output\-dir\fR=DIRECTORY
.RS 4
Write reassembled TCP streams to this directory (for debugging)\&. It is an error if the directory does not exist\&.
.RE
.PP
\fB\-\-pcap\-skip\-payload\fR
.RS 4
Skip payload from TCP streams (for debugging)\&. This option makes sure that every byte of data is consumed immediately\&.
.RE
.SS "Stream Reassembly Notes"
.sp
If the first segment of a new flow is not a SYN packet, the sequence number at the beginning of the data specifies the intitial sequence number\&. Earlier segments that arrive out of order are ignored\&. If an unfinished flow is logically restarted with a SYN TCP packet, any unconsumed data from a partial OpenFlow message is discarded\&. IP fragments are not supported\&.
.SH "OFTR JSONRPC"
.sp
\fBoftr jsonrpc\fR [\fIOPTIONS\fR]
.sp
Run a JSON\-RPC server\&. By default, the control connection comes from stdio\&.
.SS "OPTIONS"
.PP
\fB\-h, \-\-help\fR
.RS 4
Print out usage information for the command\&.
.RE
.SH "OFTR HELP"
.sp
\fBoftr help\fR [\fIOPTIONS\fR] [\fIARGS\fR, \&...]
.sp
Access built\-in information about the YAML schema used to describe all OpenFlow messages\&.
.sp
Command\-line options list one type of schema object or dump the entire schema\&. Arguments will print the desired schema and all of its dependencies\&.
.SS "OPTIONS"
.PP
\fB\-h, \-\-help\fR
.RS 4
Print out usage information for the command\&.
.RE
.PP
\fB\-a, \-\-actions\fR
.RS 4
List supported actions\&.
.RE
.PP
\fB\-b, \-\-brief\fR
.RS 4
Display abbreviated form of message schema\&.
.RE
.PP
\fB\-\-builtins\fR
.RS 4
List supported builtin types\&.
.RE
.PP
\fB\-\-enums\fR
.RS 4
List supported enumerated types\&.
.RE
.PP
\fB\-\-field\-table\fR
.RS 4
List supported match fields in a table\&.
.RE
.PP
\fB\-f, \-\-fields\fR
.RS 4
List supported match fields\&.
.RE
.PP
\fB\-\-flags\fR
.RS 4
List supported flag types\&.
.RE
.PP
\fB\-i, \-\-instructions\fR
.RS 4
List supported instructions\&.
.RE
.PP
\fB\-m, \-\-messages\fR
.RS 4
List supported messages\&.
.RE
.PP
\fB\-\-mixed\fR
.RS 4
List supported mixed types\&.
.RE
.PP
\fB\-r, \-\-rpc\fR
.RS 4
List supported RPC commands\&.
.RE
.PP
\fB\-\-schema\-all\fR
.RS 4
List complete schema\&.
.RE
.PP
\fB\-\-schema\-lexicon\fR
.RS 4
List schema lexicon\&.
.RE
.PP
\fB\-\-schema\-names\fR
.RS 4
List all schema names\&.
.RE
.SH "LOGGING OPTIONS"
.sp
All commands support options that control the verbosity of log messages\&.
.PP
\fB\-\-logfile\fR=\fILOGFILE\fR
.RS 4
Log messages to
\fILOGFILE\fR\&.
.RE
.PP
\fB\-\-loglevel\fR=\fILEVEL\fR
.RS 4
Specifies the verbosity of logging output\&. The default is
\fIfatal\fR\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBnone\fR
= No log messages emitted\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBdebug\fR
= Log debug messages and above\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBinfo\fR
= Log info messages and above\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBwarning\fR
= Log warning messages and above\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBerror\fR
= Log error messages and above\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBfatal\fR
= Log fatal messages only \- the default\&.
.RE
.RE
.PP
\fB\-\-trace\fR=\fITRACE,\&...\fR
.RS 4
Specifies additional trace options\&. You can specify more than one\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBmsg\fR
= Log all OpenFlow messages sent and received\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBrpc\fR
= Log all JSON\-RPC events send and received\&.
.RE
.RE
.SH "SEE ALSO"
.sp
\fIoftr\-jsonrpc\fR(1), \fIoftr\-schema\fR(1)
.SH "EXIT STATUS"
.PP
\fB0\fR
.RS 4
Success
.RE
.PP
\fB1\fR
.RS 4
Failure: Syntax or usage error in command line arguments\&.
.RE
.PP
\fB9\fR
.RS 4
Failure: Failure occurred opening a file\&.
.RE
.PP
\fB10\fR
.RS 4
Failure: Encode failed or decode failed\&.
.RE
.PP
\fB>= 11\fR
.RS 4
Failure: Uncommon failure\&.
.RE
.SH "RESOURCES"
.sp
GitHub: https://github\&.com/byllyfish/oftr
.SH "COPYING"
.sp
Copyright (C) 2015\-2017 William W\&. Fisher\&. Free use of this software is granted under the terms of the MIT License\&.
.SH "AUTHOR"
.PP
\fBWilliam W\&. Fisher\fR <\&william\&.w\&.fisher@gmail\&.com\&>
.RS 4
Author.
.RE
