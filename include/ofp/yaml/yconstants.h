#ifndef OFP_YAML_YCONSTANTS_H
#define OFP_YAML_YCONSTANTS_H

#include "ofp/constants.h"

namespace llvm { // <namespace llvm>
namespace yaml { // <namespace yaml>

#define OFP_YAML_ENUMCASE(val)  io.enumCase(value, #val, ofp::val)

template <>
struct ScalarEnumerationTraits<ofp::OFPType> {
  static void enumeration(IO &io, ofp::OFPType &value) {
    OFP_YAML_ENUMCASE(OFPT_HELLO);
    OFP_YAML_ENUMCASE(OFPT_ERROR);
    OFP_YAML_ENUMCASE(OFPT_ECHO_REQUEST);
    OFP_YAML_ENUMCASE(OFPT_ECHO_REPLY);
    OFP_YAML_ENUMCASE(OFPT_EXPERIMENTER);
    OFP_YAML_ENUMCASE(OFPT_FEATURES_REQUEST);
    OFP_YAML_ENUMCASE(OFPT_FEATURES_REPLY);
    OFP_YAML_ENUMCASE(OFPT_GET_CONFIG_REQUEST);
    OFP_YAML_ENUMCASE(OFPT_GET_CONFIG_REPLY);
    OFP_YAML_ENUMCASE(OFPT_SET_CONFIG);
    OFP_YAML_ENUMCASE(OFPT_PACKET_IN);
    OFP_YAML_ENUMCASE(OFPT_FLOW_REMOVED);
    OFP_YAML_ENUMCASE(OFPT_PORT_STATUS);
    OFP_YAML_ENUMCASE(OFPT_PACKET_OUT);
    OFP_YAML_ENUMCASE(OFPT_FLOW_MOD);
    OFP_YAML_ENUMCASE(OFPT_GROUP_MOD);
    OFP_YAML_ENUMCASE(OFPT_PORT_MOD);
    OFP_YAML_ENUMCASE(OFPT_TABLE_MOD);
    OFP_YAML_ENUMCASE(OFPT_MULTIPART_REQUEST);
    OFP_YAML_ENUMCASE(OFPT_MULTIPART_REPLY);
    OFP_YAML_ENUMCASE(OFPT_BARRIER_REQUEST);
    OFP_YAML_ENUMCASE(OFPT_BARRIER_REPLY);
    OFP_YAML_ENUMCASE(OFPT_QUEUE_GET_CONFIG_REQUEST);
    OFP_YAML_ENUMCASE(OFPT_QUEUE_GET_CONFIG_REPLY);
    OFP_YAML_ENUMCASE(OFPT_ROLE_REQUEST);
    OFP_YAML_ENUMCASE(OFPT_ROLE_REPLY);
    OFP_YAML_ENUMCASE(OFPT_GET_ASYNC_REQUEST);
    OFP_YAML_ENUMCASE(OFPT_GET_ASYNC_REPLY);
    OFP_YAML_ENUMCASE(OFPT_SET_ASYNC);
    OFP_YAML_ENUMCASE(OFPT_METER_MOD);
  }
};

} // </namespace yaml>
} // </namespace llvm>

#endif // OFP_YAML_YCONSTANTS_H
