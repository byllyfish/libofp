//
// !! DO NOT EDIT THIS FILE!!
//
// This file is automatically generated during the build
// process. Please make your changes to `ofp/oxmfields.tab`.

#ifndef OFP_OXMFIELDS_AUTOGENERATED_H
#define OFP_OXMFIELDS_AUTOGENERATED_H

#include "ofp/oxmrange.h"
#include "ofp/oxmvalue.h"
#include "ofp/enetaddress.h"
#include "ofp/ipv4address.h"
#include "ofp/ipv6address.h"

namespace ofp {

extern const OXMRange OXMPrereq_OFB_IN_PHY_PORT;
extern const OXMRange OXMPrereq_OFB_VLAN_PCP;
extern const OXMRange OXMPrereq_OFB_IP_DSCP;
extern const OXMRange OXMPrereq_OFB_IP_ECN;
extern const OXMRange OXMPrereq_OFB_IP_PROTO;
extern const OXMRange OXMPrereq_OFB_IPV4_SRC;
extern const OXMRange OXMPrereq_OFB_IPV4_DST;
extern const OXMRange OXMPrereq_OFB_TCP_SRC;
extern const OXMRange OXMPrereq_OFB_TCP_DST;
extern const OXMRange OXMPrereq_OFB_UDP_SRC;
extern const OXMRange OXMPrereq_OFB_UDP_DST;
extern const OXMRange OXMPrereq_OFB_SCTP_SRC;
extern const OXMRange OXMPrereq_OFB_SCTP_DST;
extern const OXMRange OXMPrereq_OFB_ICMPV4_TYPE;
extern const OXMRange OXMPrereq_OFB_ICMPV4_CODE;
extern const OXMRange OXMPrereq_OFB_ARP_OP;
extern const OXMRange OXMPrereq_OFB_ARP_SPA;
extern const OXMRange OXMPrereq_OFB_ARP_TPA;
extern const OXMRange OXMPrereq_OFB_ARP_SHA;
extern const OXMRange OXMPrereq_OFB_ARP_THA;
extern const OXMRange OXMPrereq_OFB_IPV6_SRC;
extern const OXMRange OXMPrereq_OFB_IPV6_DST;
extern const OXMRange OXMPrereq_OFB_IPV6_FLABEL;
extern const OXMRange OXMPrereq_OFB_ICMPV6_TYPE;
extern const OXMRange OXMPrereq_OFB_ICMPV6_CODE;
extern const OXMRange OXMPrereq_OFB_IPV6_ND_TARGET;
extern const OXMRange OXMPrereq_OFB_IPV6_ND_SLL;
extern const OXMRange OXMPrereq_OFB_IPV6_ND_TLL;
extern const OXMRange OXMPrereq_OFB_MPLS_LABEL;
extern const OXMRange OXMPrereq_OFB_MPLS_TC;
extern const OXMRange OXMPrereq_OFP_MPLS_BOS;
extern const OXMRange OXMPrereq_OFB_PBB_ISID;
extern const OXMRange OXMPrereq_OFB_IPV6_EXTHDR;


/// \brief Defines an internal ID in the contiguous range 0..(N-1).
enum class OXMInternalID : UInt16 {
  OFB_IN_PORT,
  OFB_IN_PHY_PORT,
  OFB_METADATA,
  OFB_ETH_DST,
  OFB_ETH_SRC,
  OFB_ETH_TYPE,
  OFB_VLAN_VID,
  OFB_VLAN_PCP,
  OFB_IP_DSCP,
  OFB_IP_ECN,
  OFB_IP_PROTO,
  OFB_IPV4_SRC,
  OFB_IPV4_DST,
  OFB_TCP_SRC,
  OFB_TCP_DST,
  OFB_UDP_SRC,
  OFB_UDP_DST,
  OFB_SCTP_SRC,
  OFB_SCTP_DST,
  OFB_ICMPV4_TYPE,
  OFB_ICMPV4_CODE,
  OFB_ARP_OP,
  OFB_ARP_SPA,
  OFB_ARP_TPA,
  OFB_ARP_SHA,
  OFB_ARP_THA,
  OFB_IPV6_SRC,
  OFB_IPV6_DST,
  OFB_IPV6_FLABEL,
  OFB_ICMPV6_TYPE,
  OFB_ICMPV6_CODE,
  OFB_IPV6_ND_TARGET,
  OFB_IPV6_ND_SLL,
  OFB_IPV6_ND_TLL,
  OFB_MPLS_LABEL,
  OFB_MPLS_TC,
  OFP_MPLS_BOS,
  OFB_PBB_ISID,
  OFB_TUNNEL_ID,
  OFB_IPV6_EXTHDR,
  UNKNOWN = 0xFFFFU
};

struct OXMTypeInternalMapEntry {
  UInt32 value32;
  OXMInternalID id;
};

/// \brief Ingress port. Numerical representation of incoming port, starting at 1. This may be a physical or switch-defined logical port.
using OFB_IN_PORT = OXMValue<OXMInternalID::OFB_IN_PORT,0x8000,0,Big32,32,false>;

/// \brief Physical port. In ofp_packet_in messages, underlying physical port when packet received on a logical port.
using OFB_IN_PHY_PORT = OXMValue<OXMInternalID::OFB_IN_PHY_PORT,0x8000,1,Big32,32,false,&OXMPrereq_OFB_IN_PHY_PORT>;

/// \brief Table metadata. Used to pass information between tables.
using OFB_METADATA = OXMValue<OXMInternalID::OFB_METADATA,0x8000,2,Big64,64,true>;

/// \brief Ethernet destination MAC address.
using OFB_ETH_DST = OXMValue<OXMInternalID::OFB_ETH_DST,0x8000,3,EnetAddress,48,true>;

/// \brief Ethernet source MAC address.
using OFB_ETH_SRC = OXMValue<OXMInternalID::OFB_ETH_SRC,0x8000,4,EnetAddress,48,true>;

/// \brief Ethernet type of the OpenFlow packet payload, after VLAN tags.
using OFB_ETH_TYPE = OXMValue<OXMInternalID::OFB_ETH_TYPE,0x8000,5,Big16,16,false>;

/// \brief VLAN-ID from 802.1Q header. The CFI bit indicates the presence of a valid VLAN-ID.
using OFB_VLAN_VID = OXMValue<OXMInternalID::OFB_VLAN_VID,0x8000,6,Big16,13,true>;

/// \brief VLAN-PCP from 802.1Q header.
using OFB_VLAN_PCP = OXMValue<OXMInternalID::OFB_VLAN_PCP,0x8000,7,Big8,3,false,&OXMPrereq_OFB_VLAN_PCP>;

/// \brief DiffServ Code Point (DSCP). Part of the IPv4 ToS field or the IPv6 Traffic Class field.
using OFB_IP_DSCP = OXMValue<OXMInternalID::OFB_IP_DSCP,0x8000,8,Big8,6,false,&OXMPrereq_OFB_IP_DSCP>;

/// \brief ECN bits of the IP header. Part of the IPv4 ToS field or the IPv6 Traffic Class field.
using OFB_IP_ECN = OXMValue<OXMInternalID::OFB_IP_ECN,0x8000,9,Big8,2,false,&OXMPrereq_OFB_IP_ECN>;

/// \brief IPv4 or IPv6 protocol number.
using OFB_IP_PROTO = OXMValue<OXMInternalID::OFB_IP_PROTO,0x8000,10,Big8,8,false,&OXMPrereq_OFB_IP_PROTO>;

/// \brief IPv4 source address. Can use subnet mask or arbitrary bitmask.
using OFB_IPV4_SRC = OXMValue<OXMInternalID::OFB_IPV4_SRC,0x8000,11,IPv4Address,32,true,&OXMPrereq_OFB_IPV4_SRC>;

/// \brief IPv4 destination address. Can use subnet mask or arbitrary bitmask.
using OFB_IPV4_DST = OXMValue<OXMInternalID::OFB_IPV4_DST,0x8000,12,IPv4Address,32,true,&OXMPrereq_OFB_IPV4_DST>;

using OFB_TCP_SRC = OXMValue<OXMInternalID::OFB_TCP_SRC,0x8000,13,Big16,16,false,&OXMPrereq_OFB_TCP_SRC>;

using OFB_TCP_DST = OXMValue<OXMInternalID::OFB_TCP_DST,0x8000,14,Big16,16,false,&OXMPrereq_OFB_TCP_DST>;

using OFB_UDP_SRC = OXMValue<OXMInternalID::OFB_UDP_SRC,0x8000,15,Big16,16,false,&OXMPrereq_OFB_UDP_SRC>;

using OFB_UDP_DST = OXMValue<OXMInternalID::OFB_UDP_DST,0x8000,16,Big16,16,false,&OXMPrereq_OFB_UDP_DST>;

using OFB_SCTP_SRC = OXMValue<OXMInternalID::OFB_SCTP_SRC,0x8000,17,Big16,16,false,&OXMPrereq_OFB_SCTP_SRC>;

using OFB_SCTP_DST = OXMValue<OXMInternalID::OFB_SCTP_DST,0x8000,18,Big16,16,false,&OXMPrereq_OFB_SCTP_DST>;

using OFB_ICMPV4_TYPE = OXMValue<OXMInternalID::OFB_ICMPV4_TYPE,0x8000,19,Big8,8,false,&OXMPrereq_OFB_ICMPV4_TYPE>;

using OFB_ICMPV4_CODE = OXMValue<OXMInternalID::OFB_ICMPV4_CODE,0x8000,20,Big8,8,false,&OXMPrereq_OFB_ICMPV4_CODE>;

using OFB_ARP_OP = OXMValue<OXMInternalID::OFB_ARP_OP,0x8000,21,Big16,16,false,&OXMPrereq_OFB_ARP_OP>;

using OFB_ARP_SPA = OXMValue<OXMInternalID::OFB_ARP_SPA,0x8000,22,IPv4Address,32,true,&OXMPrereq_OFB_ARP_SPA>;

using OFB_ARP_TPA = OXMValue<OXMInternalID::OFB_ARP_TPA,0x8000,23,IPv4Address,32,true,&OXMPrereq_OFB_ARP_TPA>;

using OFB_ARP_SHA = OXMValue<OXMInternalID::OFB_ARP_SHA,0x8000,24,EnetAddress,48,true,&OXMPrereq_OFB_ARP_SHA>;

using OFB_ARP_THA = OXMValue<OXMInternalID::OFB_ARP_THA,0x8000,25,EnetAddress,48,true,&OXMPrereq_OFB_ARP_THA>;

using OFB_IPV6_SRC = OXMValue<OXMInternalID::OFB_IPV6_SRC,0x8000,26,IPv6Address,128,true,&OXMPrereq_OFB_IPV6_SRC>;

using OFB_IPV6_DST = OXMValue<OXMInternalID::OFB_IPV6_DST,0x8000,27,IPv6Address,128,true,&OXMPrereq_OFB_IPV6_DST>;

using OFB_IPV6_FLABEL = OXMValue<OXMInternalID::OFB_IPV6_FLABEL,0x8000,28,Big32,20,true,&OXMPrereq_OFB_IPV6_FLABEL>;

using OFB_ICMPV6_TYPE = OXMValue<OXMInternalID::OFB_ICMPV6_TYPE,0x8000,29,Big8,8,false,&OXMPrereq_OFB_ICMPV6_TYPE>;

using OFB_ICMPV6_CODE = OXMValue<OXMInternalID::OFB_ICMPV6_CODE,0x8000,30,Big8,8,false,&OXMPrereq_OFB_ICMPV6_CODE>;

using OFB_IPV6_ND_TARGET = OXMValue<OXMInternalID::OFB_IPV6_ND_TARGET,0x8000,31,IPv6Address,128,false,&OXMPrereq_OFB_IPV6_ND_TARGET>;

using OFB_IPV6_ND_SLL = OXMValue<OXMInternalID::OFB_IPV6_ND_SLL,0x8000,32,EnetAddress,48,false,&OXMPrereq_OFB_IPV6_ND_SLL>;

using OFB_IPV6_ND_TLL = OXMValue<OXMInternalID::OFB_IPV6_ND_TLL,0x8000,33,EnetAddress,48,false,&OXMPrereq_OFB_IPV6_ND_TLL>;

using OFB_MPLS_LABEL = OXMValue<OXMInternalID::OFB_MPLS_LABEL,0x8000,34,Big32,20,false,&OXMPrereq_OFB_MPLS_LABEL>;

using OFB_MPLS_TC = OXMValue<OXMInternalID::OFB_MPLS_TC,0x8000,35,Big8,3,false,&OXMPrereq_OFB_MPLS_TC>;

using OFP_MPLS_BOS = OXMValue<OXMInternalID::OFP_MPLS_BOS,0x8000,36,Big8,1,false,&OXMPrereq_OFP_MPLS_BOS>;

using OFB_PBB_ISID = OXMValue<OXMInternalID::OFB_PBB_ISID,0x8000,37,Big32,24,true,&OXMPrereq_OFB_PBB_ISID>;

using OFB_TUNNEL_ID = OXMValue<OXMInternalID::OFB_TUNNEL_ID,0x8000,38,Big64,64,true>;

using OFB_IPV6_EXTHDR = OXMValue<OXMInternalID::OFB_IPV6_EXTHDR,0x8000,39,Big16,9,true,&OXMPrereq_OFB_IPV6_EXTHDR>;


extern const OXMTypeInfo OXMTypeInfoArray[];
extern const size_t OXMTypeInfoArraySize;
extern const OXMTypeInternalMapEntry OXMTypeInternalMapArray[];

template <class Visitor>
void OXMDispatch(OXMInternalID id, Visitor *visitor) {
  switch (id) {
  case OXMInternalID::OFB_IN_PORT:
    visitor->template visit<OFB_IN_PORT>();
    break;
  case OXMInternalID::OFB_IN_PHY_PORT:
    visitor->template visit<OFB_IN_PHY_PORT>();
    break;
  case OXMInternalID::OFB_METADATA:
    visitor->template visit<OFB_METADATA>();
    break;
  case OXMInternalID::OFB_ETH_DST:
    visitor->template visit<OFB_ETH_DST>();
    break;
  case OXMInternalID::OFB_ETH_SRC:
    visitor->template visit<OFB_ETH_SRC>();
    break;
  case OXMInternalID::OFB_ETH_TYPE:
    visitor->template visit<OFB_ETH_TYPE>();
    break;
  case OXMInternalID::OFB_VLAN_VID:
    visitor->template visit<OFB_VLAN_VID>();
    break;
  case OXMInternalID::OFB_VLAN_PCP:
    visitor->template visit<OFB_VLAN_PCP>();
    break;
  case OXMInternalID::OFB_IP_DSCP:
    visitor->template visit<OFB_IP_DSCP>();
    break;
  case OXMInternalID::OFB_IP_ECN:
    visitor->template visit<OFB_IP_ECN>();
    break;
  case OXMInternalID::OFB_IP_PROTO:
    visitor->template visit<OFB_IP_PROTO>();
    break;
  case OXMInternalID::OFB_IPV4_SRC:
    visitor->template visit<OFB_IPV4_SRC>();
    break;
  case OXMInternalID::OFB_IPV4_DST:
    visitor->template visit<OFB_IPV4_DST>();
    break;
  case OXMInternalID::OFB_TCP_SRC:
    visitor->template visit<OFB_TCP_SRC>();
    break;
  case OXMInternalID::OFB_TCP_DST:
    visitor->template visit<OFB_TCP_DST>();
    break;
  case OXMInternalID::OFB_UDP_SRC:
    visitor->template visit<OFB_UDP_SRC>();
    break;
  case OXMInternalID::OFB_UDP_DST:
    visitor->template visit<OFB_UDP_DST>();
    break;
  case OXMInternalID::OFB_SCTP_SRC:
    visitor->template visit<OFB_SCTP_SRC>();
    break;
  case OXMInternalID::OFB_SCTP_DST:
    visitor->template visit<OFB_SCTP_DST>();
    break;
  case OXMInternalID::OFB_ICMPV4_TYPE:
    visitor->template visit<OFB_ICMPV4_TYPE>();
    break;
  case OXMInternalID::OFB_ICMPV4_CODE:
    visitor->template visit<OFB_ICMPV4_CODE>();
    break;
  case OXMInternalID::OFB_ARP_OP:
    visitor->template visit<OFB_ARP_OP>();
    break;
  case OXMInternalID::OFB_ARP_SPA:
    visitor->template visit<OFB_ARP_SPA>();
    break;
  case OXMInternalID::OFB_ARP_TPA:
    visitor->template visit<OFB_ARP_TPA>();
    break;
  case OXMInternalID::OFB_ARP_SHA:
    visitor->template visit<OFB_ARP_SHA>();
    break;
  case OXMInternalID::OFB_ARP_THA:
    visitor->template visit<OFB_ARP_THA>();
    break;
  case OXMInternalID::OFB_IPV6_SRC:
    visitor->template visit<OFB_IPV6_SRC>();
    break;
  case OXMInternalID::OFB_IPV6_DST:
    visitor->template visit<OFB_IPV6_DST>();
    break;
  case OXMInternalID::OFB_IPV6_FLABEL:
    visitor->template visit<OFB_IPV6_FLABEL>();
    break;
  case OXMInternalID::OFB_ICMPV6_TYPE:
    visitor->template visit<OFB_ICMPV6_TYPE>();
    break;
  case OXMInternalID::OFB_ICMPV6_CODE:
    visitor->template visit<OFB_ICMPV6_CODE>();
    break;
  case OXMInternalID::OFB_IPV6_ND_TARGET:
    visitor->template visit<OFB_IPV6_ND_TARGET>();
    break;
  case OXMInternalID::OFB_IPV6_ND_SLL:
    visitor->template visit<OFB_IPV6_ND_SLL>();
    break;
  case OXMInternalID::OFB_IPV6_ND_TLL:
    visitor->template visit<OFB_IPV6_ND_TLL>();
    break;
  case OXMInternalID::OFB_MPLS_LABEL:
    visitor->template visit<OFB_MPLS_LABEL>();
    break;
  case OXMInternalID::OFB_MPLS_TC:
    visitor->template visit<OFB_MPLS_TC>();
    break;
  case OXMInternalID::OFP_MPLS_BOS:
    visitor->template visit<OFP_MPLS_BOS>();
    break;
  case OXMInternalID::OFB_PBB_ISID:
    visitor->template visit<OFB_PBB_ISID>();
    break;
  case OXMInternalID::OFB_TUNNEL_ID:
    visitor->template visit<OFB_TUNNEL_ID>();
    break;
  case OXMInternalID::OFB_IPV6_EXTHDR:
    visitor->template visit<OFB_IPV6_EXTHDR>();
    break;
  case OXMInternalID::UNKNOWN: break;
  };
}

} // namespace ofp

#endif //OFP_OXMFIELDS_AUTOGENERATED_H
